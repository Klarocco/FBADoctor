<?php /* Generated by Webdimensions  www.webdimensions.co.in */

class Inventory_salvager extends My_controller {
	function __construct() {
		parent::__construct();
		$this->load->library( 'amazon' );
		$this->load->model( "user_model" );
		$this->load->model( "inventory_salvager_model" );
		$this->load->model( "subscription_model" );
		$this->load->model( "feedback_setting_model" );
		$this->load->model( "reimbursement_model" );
		$paymentinfo = $this->subscription_model->get_payment_info_by_accountid( $this->user->info->ID_ACCOUNT );
		if ( ( $this->user->info->feedbackfromemailaddress == '' || $this->user->info->mws_sellerid == '' || $this->user->info->mws_authtoken == '' || empty( $paymentinfo['ID_PAYMENT'] ) ) && ! $this->user->info->admin ) {
			redirect( site_url( "feedback_setting/setup" ) );
		}

		if ( ! $this->user->loggedin ) {
			redirect( 'login' );
		}
	}

	public function index() {
		$this->template->loadData( "activeLink", array( "inventory_salvager" => array( "inventory_salvager" => 1 ) ) );
		$this->template->loadContent( "inventory_salvager/index.php" );
	}

	public function show_detail() {
		$users  = $this->user_model->getAllActiveUsers();
		$user[] = $userCase = array();
		foreach ( $users as $key => $user ) {
			$userCase['data'][ $key ]                = $user;
			$userCase['data'][ $key ]['quantity']    = $this->getTotalQuantity( $user['ID_ACCOUNT'] ) + $this->inventory_salvager_model->getTotalinventorysuppliedcase( $user['ID_ACCOUNT'] );
			$userCase['data'][ $key ]['caseDetails'] = $this->getUserData( $user['ID_ACCOUNT'] );
		}
		echo json_encode( $userCase );
		exit;
	}

	public function getTotalQuantity( $accountId, $type = null ) {
		$quantity = 0;
		$result   = $this->inventory_salvager_model->getTotalQuantityFnskUDetailsByAccountId( $accountId, ( ! empty( $type ) ? $type : '' ) );
		foreach ( $result as $key => $value ) {
			$quantity += $value['totalqty'];
		}

		return $quantity;
	}

	public function getUserData( $accountId ) {
		$case         = array();
		$udwQuantity  = abs( $this->getTotalQuantity( $accountId, $type = 'UDW' ) );
		$ulwQuantity  = abs( $this->getTotalQuantity( $accountId, $type = 'ULW' ) );
		$ulfwQuantity = abs( $this->getTotalQuantity( $accountId, $type = 'ULFW' ) );
		$asidQuantity = abs( $this->inventory_salvager_model->getTotalinventorysuppliedcase( $accountId ) );

		$case[0] = array( 'case_type' => 'UDW', 'totCount' => 0 );
		$case[1] = array( 'case_type' => 'ULW', 'totCount' => 0 );
		$case[2] = array( 'case_type' => 'ULFW', 'totCount' => 0 );
		$case[3] = array( 'case_type' => 'ASID', 'totCount' => 0 );

		if ( $udwQuantity > 0 ) {
			$case[0] = array( 'case_type' => 'UDW', 'totCount' => $udwQuantity );
		}
		if ( $ulwQuantity > 0 ) {
			$case[1] = array( 'case_type' => 'ULW', 'totCount' => $ulwQuantity );
		}
		if ( $ulfwQuantity > 0 ) {
			$case[2] = array( 'case_type' => 'ULFW', 'totCount' => $ulfwQuantity );
		}
		if ( $asidQuantity > 0 ) {
			$case[3] = array( 'case_type' => 'ASID', 'totCount' => $asidQuantity );
		}

		return $case;
	}

	public function generateCasesByIdAndType( $accountId, $caseType ) {
		$count     = 0;
		$userCases = array();
		$settings  = $this->feedback_setting_model->get_feedback_setting( $accountId );
		$result    = $this->inventory_salvager_model->getInventoryCasesByAcountIdAndCaseType( $accountId, $caseType );

		$sortArray = $this->groupSortArray( $result );

		$finalrecord = array();
		foreach ( $sortArray as $key => $record ) {
			$finalrecord['caseDetails'][ $count ]['quantity'] = '';
			foreach ( $record as $value ) {
				$finalrecord['caseDetails'][ $count ]['quantity']  += $value['quantity'];
				$finalrecord['caseDetails'][ $count ]['startDate'] = $value['report_start_date'];
				$finalrecord['caseDetails'][ $count ]['endDate']   = $value['report_end_date'];
                $finalrecord['caseDetails'][ $count ]['id']   = $value['id'];
                $finalrecord['caseDetails'][ $count ]['fnsku']   = $value['fnsku'];
                $finalrecord['caseDetails'][ $count ]['accountId'] = $accountId;
				$finalrecord['caseDetails'][ $count ]['type']      = $caseType;
			}
			$count += 1;
		}

		$userCases                 = $finalrecord;
		$userCases['accountId']    = $accountId;
		$userCases['emailAddress'] = $settings['link_amazon_email'];
		$userCases['pass']         = $settings['link_amazon_password'];
		$userCases['type']         = $caseType;

		if ( $userCases['type'] == 'UDW' ) {
			$userCases["msg_top"] = "Our records indicate that the following FNSKUs were tagged as misplaced with no records of reimbursement. Please check the following units and reimburse where necessary.";
		} else if ( $userCases['type'] == 'ULW' ) {
			$userCases["msg_top"] = "Our records indicate that the following FNSKUs were tagged as misplaced with no records of reimbursement. Please check the following units and reimburse where necessary.";
		} else if ( $userCases['type'] == 'ULFW' ) {
			$userCases["msg_top"] = "Please could you check FNSKU were lost in Amazon's warehouse.";
		}
		$this->template->loadContent( "inventory_salvager/InventoryCaseGeneration.php", $userCases );
	}

	public function AsidGeneratecase( $accountId, $case_type ) {
		$count     = 0;
		$userCases = array();
		$settings  = $this->feedback_setting_model->get_feedback_setting( $accountId );
		$result    = $this->inventory_salvager_model->ASIDCaseGeneration( $accountId, $case_type );

		foreach ( $result as $key => $record ) {
			$userCases['ASIDcaseDetails'][ $key ] = $record;
		}
		$userCases['emailAddress'] = $settings['link_amazon_email'];
		$userCases['pass']         = $settings['link_amazon_password'];
		$this->template->loadContent( "inventory_salvager/InventoryASIDCaseGeneration.php", $userCases );
	}

	public function groupSortArray( $caseDetails ) {
		$arr = array();
		foreach ( $caseDetails as $key => $item ) {
			if ( array_key_exists( 'report_start_date', $item ) ) {
				$arr[ $item['report_start_date'] ][ $key ] = $item;
			}
		}

		return $arr;
	}

	public function getFnskU( $startDate, $endDate, $accountId, $type )
    {
		$fnsku = $this->inventory_salvager_model->getFnskUDetailsByStartEndDateAccountIdType( urldecode( $startDate ), urldecode( $endDate ), $accountId, $type );
        foreach ( $fnsku as $key => $value ) {
			$fnsku[ $key ]['quantity_fnsku'] = $value['totalqty'];
		}
		echo json_encode( $fnsku );
		exit;
	}


	public function GetASIDCaseDetail( $inventoryItemId, $account_id, $case_type ) {
		$Asidcase = $this->inventory_salvager_model->getAsidDetailsIdType( $inventoryItemId, $account_id, $case_type );
		foreach ( $Asidcase as $key => $value ) {
			$Asidcase = $value;
		}
		echo json_encode( $Asidcase );
		exit;
	}

	public function createInventoryCaseId()
    {
        $flag = 0;
        $totalCount = count($_POST['dataValue']);
        $result['caseDetails'] = array();
        $subValue = array();
        if ($totalCount > 0)
        {
            foreach ($_POST['dataValue'] as $key => $record)
            {
                if (!empty($record))
                {
                    $data = (explode("_", $record));
                    $startDate = $data[0];
                    $endDate = $data[1];
                    $fnsku = $data[2];
                    $accountId = $data[3];
                    $caseType = $data[4];
                    $result['caseDetails'][] = $this->inventory_salvager_model->getInventoryDetailsData($startDate, $endDate, $fnsku, $accountId, $caseType);
                }
            }
            if($result)
            {
                foreach ($result['caseDetails'] as $index => $subValue)
                {
                    foreach ($subValue as $flag => $records)
                    {
                        $data = array('status' => '2');
                        $this->inventory_salvager_model->updateInventoryDetailsData($accountId, $records['transaction_item_id'], $data);
                        $data = array('caseId' => $_POST['caseId'], 'status' => '1', 'date' => date('Y-m-d H:i:s'));
                        $effectedRows = $this->inventory_salvager_model->updateInventoryCaseDetails($accountId, $records['transaction_item_id'], $data);
                        if ($effectedRows > 0)
                        {
                            $flag = 1;
                        }
                    };
                }
                echo $flag;return false;
            }
        }
        else
        {
            echo $flag = 0;
            return true;
        }
    }

	public function generateASIDCase() {
		$flag = 0;
		foreach ( $_POST['myCheckboxes'] as $key => $record ) {
			$data                             = ( explode( "/", $record ) );
			$id                               = $data[0];
			$account_id                       = $data[1];
			$type                             = $data[2];
			$sku                              = $data[3];
			$ASID_data['case_detail'][ $key ] = $this->inventory_salvager_model->getInventoryASID( $id, $account_id, $type, $sku );

		}

		if ( ! empty( $ASID_data ) ) {
			foreach ( $ASID_data['case_detail'] as $key => $value ) {
				foreach ( $value as $record ) {
					$data = array( 'status' => '2' );
					$this->inventory_salvager_model->updateInventoryShipmentDetailsData( $record['seller_sku'], $data );
					$data         = array(
						'caseId' => $_POST['case_id'],
						'status' => '1',
						'date'   => date( 'Y-m-d H:i:s' )
					);
					$effectedRows = $this->inventory_salvager_model->updateInventoryShipmentDetails( $record['id'], $record['ID_ACCOUNT'], $record['case_type'], $data );
					if ( $effectedRows > 0 ) {
						echo $flag;

						return true;
					} else {
						echo $flag = 0;

						return false;
					}
				}
			}
		}
	}

	public function generatedInvetoryCases() {
		$this->template->loadData( "activeLink", array( "inventory_salvager" => array( "generate_inventory_case" => 1 ) ) );
		$finalResult = array();
		if ( isset( $this->user->info->admin ) && ! empty( $this->user->info->admin ) ) {
			$users = $this->user_model->getAllUsers();
			foreach ( $users as $index => $user ) {
				$inventoryDetails[ $index ] = $this->inventory_salvager_model->getInventoryCaseByAccountId( $user['ID_ACCOUNT'] );

				if ( $inventoryDetails[ $index ] ) {

					$finalResult[ $index ]['user'] = $user;
					foreach ( $inventoryDetails[ $index ] as $key => $inventoryDetails ) {
						if ( $inventoryDetails['status'] == '1' ) {
							$reimbursementAmount                                                    = $this->inventory_salvager_model->fetchreimbursementamount( $inventoryDetails['caseId'], $inventoryDetails['accountId'], $inventoryDetails['sku'] );
							$finalResult[ $index ]['case'][ $key ]                                  = $inventoryDetails;
							$finalResult[ $index ]['case'][ $key ]['quantity_reimbursed_inventory'] = $reimbursementAmount['quantity_reimbursed_inventory'];
							$finalResult[ $index ]['case'][ $key ]['reimburse_id']                  = $reimbursementAmount['reimburse_id'];
							$finalResult[ $index ]['case'][ $key ]['amount_total']                  = $reimbursementAmount['amount_total'];
						} else {
							$finalResult[ $index ]['case'][ $key ]                                  = $inventoryDetails;
							$finalResult[ $index ]['case'][ $key ]['quantity_reimbursed_inventory'] = '';
							$finalResult[ $index ]['case'][ $key ]['reimburse_id']                  = '';
							$finalResult[ $index ]['case'][ $key ]['amount_total']                  = '';
						}
					}
				}
			}
		} else {
			$invenDetails = $this->inventory_salvager_model->getInventoryCaseByAccountId( $this->user->info->ID_ACCOUNT );

			foreach ( $invenDetails as $key => $inventoryDetails ) {
				if ( $inventoryDetails['status'] == '1' ) {
					$reimbursementAmount                                  = $this->inventory_salvager_model->fetchreimbursementamount( $inventoryDetails['caseId'], $inventoryDetails['accountId'], $inventoryDetails['sku'] );
					$finalResult[ $key ]                                  = $inventoryDetails;
					$finalResult[ $key ]['quantity_reimbursed_inventory'] = $reimbursementAmount['quantity_reimbursed_inventory'];
					$finalResult[ $key ]['reimburse_id']                  = $reimbursementAmount['reimburse_id'];
					$finalResult[ $key ]['amount_total']                  = $reimbursementAmount['amount_total'];
				} else {
					$finalResult[ $key ]                                  = $inventoryDetails;
					$finalResult[ $key ]['quantity_reimbursed_inventory'] = '';
					$finalResult[ $key ]['reimburse_id']                  = '';
					$finalResult[ $key ]['amount_total']                  = '';
				}
			}
		}
		$case_change_status = $this->reimbursement_model->get_case_change_status();
		$this->template->loadContent( "inventory_salvager/generatedInventory.php", array(
			'caseRecord' => $finalResult,
			'caseStatus' => $case_change_status
		) );
	}

	public function groupSortFNSKUArray( $inventoryDetails ) {
		$result = array();
		$arr    = array();
		foreach ( $inventoryDetails as $key => $item ) {
			if ( array_key_exists( 'fnsku', $item ) ) {
				$arr[ $item['fnsku'] ][ $key ] = $item;
			}
		}
		foreach ( $arr as $key => $fnsku ) {
			$quantity = 0;
			foreach ( $fnsku as $flag => $record ) {
				$result[ $key ]             = $record;
				$quantity                   += $record['quantity'];
				$result[ $key ]['quantity'] = $quantity;
			}
		}

		return $result;
	}

	public function AjaxgeneratedCase() {
		error_reporting( 0 );
		if ( isset( $this->user->info->admin ) && ! empty( $this->user->info->admin ) ) {
			$start_date = $end_date = '';
			if ( ! empty( $_POST['start_date'] ) ) {
				$start_date = date( 'Y-m-d 00:00:00', strtotime( $_POST['start_date'] ) );
			}
			if ( ! empty( $_POST['end_date'] ) ) {
				$end_date = date( 'Y-m-d 23:59:59', strtotime( $_POST['end_date'] ) );
			}

			if ( ! empty( $_POST['accountId'] ) ) {
				$invenDetails['user'] = $this->reimbursement_model->getUserDetailsByAccountId( $_POST['accountId'] );
				$result               = $this->inventory_salvager_model->getInventoryCaseByAccountId( $_POST['accountId'], '', $start_date, $end_date );
				$invenDetails['case'] = $invenDetails = $this->groupSortFNSKUArray( $result );
			} else {
				$users = $this->user_model->getAllUsers();
				foreach ( $users as $key => $user )
				{
					$inventoryDetails[ $key ] = $this->inventory_salvager_model->getInventoryCaseByAccountId( $user['ID_ACCOUNT'], '', $start_date, $end_date );
					$result                   = $this->groupSortFNSKUArray( $inventoryDetails[ $key ] );
					if ( $inventoryDetails[ $key ] ) {
						$invenDetails[ $key ]['user'] = $user;
						$invenDetails[ $key ]['case'] = $result;
					}
				}
			}
			$this->load->view( "inventory_salvager/AjaxgeneratedInventory.php", array( 'caseRecord' => $invenDetails ) );
		} else {
			$days    = $_POST['days'];
			$current = strtotime( date( 'Y-m-dT23:59:59' ) );
			if ( $days == 1 ) {
				$days_ago = date( 'Y-m-d h:i:s', strtotime( '-5 days', $current ) );
			} else if ( $days == 2 ) {
				$days_ago = date( 'Y-m-d h:i:s', strtotime( '-10 days', $current ) );
			} else if ( $days == 3 ) {
				$days_ago = date( 'Y-m-d h:i:s', strtotime( '-15 days', $current ) );
			} else if ( $days == 4 ) {
				$days_ago = date( 'Y-m-d h:i:s', strtotime( '-20 days', $current ) );
			} else if ( $days == 5 ) {
				$days_ago = date( 'Y-m-d h:i:s', strtotime( '-25 days', $current ) );
			} else if ( $days == 6 ) {
				$days_ago = date( 'Y-m-d h:i:s', strtotime( '-30 days', $current ) );
			} else {
				$days_ago = 0;
			}
			$result               = $this->inventory_salvager_model->getInventoryCaseByAccountId( $this->user->info->ID_ACCOUNT, $days_ago );
			$invenDetails['case'] = $invenDetails = $this->groupSortFNSKUArray( $result );
			$this->load->view( "inventory_salvager/AjaxgeneratedInventory.php", array( 'caseRecord' => $invenDetails ) );
		}
	}

	/*N,exportCsv functionality Created At 02/06/2017 */
	public function exportCsv() {
		$fileName = $this->user->info->ID_ACCOUNT . "_InventorySalvager" . date( 'Y-m-d' ) . ".csv";
		$this->load->helper( 'download' );
		if ( ! file_exists( "Downloads" ) ) {
			mkdir( "Downloads" );
		}
		error_reporting( 0 );
		$fp = fopen( "Downloads/" . $fileName, "w" );
		if ( isset( $this->user->info->admin ) && ! empty( $this->user->info->admin ) ) {
			$head = array(
				"User Name",
				"Product Name",
				"Reimbursement ID",
				"FNSKU",
				"Transaction Item Id",
				"Field",
				"Status",
				"Case Id",
				"Quantity Damage/Loss",
				"Case Reimbursed"
			);
			fputcsv( $fp, $head );
			$write_info  = array();
			$userDetails = $this->user_model->getAllUsers();
			foreach ( $userDetails as $key => $user ) {
				$inventoryDetails[ $key ] = $this->inventory_salvager_model->getInventoryCaseByAccountId( $user['ID_ACCOUNT'] );
				$result                   = $this->groupSortFNSKUArray( $inventoryDetails[ $key ] );
				foreach ( $result as $index => $case ) {
					$write_info['username']            = $user['username'];
					$write_info['productname']         = $case['productname'];
					$write_info['reimburse_id']        = $case['reimburse_id'];
					$write_info['fnsku']               = $case['fnsku'];
					$write_info['transaction_item_id'] = $case['transaction_item_id'];
					$write_info['date']                = date( 'Y/m/d', strtotime( $case['date'] ) );
					$write_info['status']              = ( ( $case['status'] == 1 ) ? 'Pending' : ( ( $case['status'] == 2 ) ? 'Success' : '' ) );
					$write_info['caseId']              = $case['caseId'];
					$write_info['quantity']            = $case['quantity'];
					$write_info['amount_total']        = ( ! empty( $caseDetials['amount_total'] ) ) ? "$" . $caseDetials['amount_total'] : '';
					fputcsv( $fp, $write_info );
				}
			}
		} else {
			$days         = 0;
			$result       = $this->inventory_salvager_model->getInventoryCaseByAccountId( $this->user->info->ID_ACCOUNT );
			$invenDetails = $this->groupSortFNSKUArray( $result );
			$head         = array(
				"Product Name",
				"Reimbursement ID",
				"FNSKU",
				"Transaction Item Id",
				"Field",
				"Status",
				"Case Id",
				"Quantity Damage/Loss",
				"Case Reimbursed"
			);
			fputcsv( $fp, $head );
			$write_info = array();
			foreach ( $invenDetails as $key => $case ) {
				$write_info['productname']         = $case['productname'];
				$write_info['reimburse_id']        = $case['reimburse_id'];
				$write_info['fnsku']               = $case['fnsku'];
				$write_info['transaction_item_id'] = $case['transaction_item_id'];
				$write_info['date']                = date( 'Y/m/d', strtotime( $case['date'] ) );
				$write_info['status']              = ( ( $case['status'] == 1 ) ? 'Pending' : ( ( $case['status'] == 2 ) ? 'Success' : '' ) );
				$write_info['caseId']              = $case['caseId'];
				$write_info['quantity']            = $case['quantity'];
				$write_info['amount_total']        = ( ! empty( $caseDetials['amount_total'] ) ) ? "$" . $caseDetials['amount_total'] : '';
				fputcsv( $fp, $write_info );
			}
		}
		fclose( $fp );
		echo $url = base_url() . 'Downloads/' . $fileName;
		exit;
	}

	function edit_case_account( $id ) {
		$result = $this->inventory_salvager_model->edit_case_by_account_id( $id );
		echo json_encode( $result );
		exit;
	}


	public function updateCaseId() {

		$caseStatusInventory = $_POST['case_status_detail'];
		if ( $caseStatusInventory == 3 ) {
			$inventoryid       = $_POST['logId'];
			$inventory_item_id = $this->inventory_salvager_model->allRecordDisplayInventory( $inventoryid );

			foreach ( $inventory_item_id as $key => $value ) {
				$insert_data = array(
					'CaseId'          => $value->caseId,
					'AcoountId'       => $value->accountId,
					'InventoryItemId' => $value->inventoryItemId,
					'Date'            => $value->date,
					'Status'          => $value->status,
					'Deleted'         => $value->deleted,
					'ReportStartDate' => $value->report_start_date,
					'ReportEndDate'   => $value->report_end_date,
					'Case_Type'       => $value->Case_Type,
					'Reason'          => $value->Reason
				);

				$this->inventory_salvager_model->insertCaseLogDetailInventory( $insert_data );
			}

			$data         = array(
				'caseId' => $_POST['case__Id'],
				'date'   => $_POST['caseDate'],
				'status' => $_POST['case_status_detail'],
				'Reason' => $_POST['addNote']
			);
			$affected_row = $this->inventory_salvager_model->updateCaseBYId( $_POST['logId'], $data );
			if ( $affected_row > 0 ) {
				$this->session->set_flashdata( "success", "Case Detail succsssfully Update." );
				redirect( 'inventory_salvager/generatedInvetoryCases' );
			} else {
				redirect( 'inventory_salvager/generatedInvetoryCases' );
			}
		} else if ( $caseStatusInventory == 0 ) {
			$inventoryid       = $_POST['logId'];
			$inventory_item_id = $this->inventory_salvager_model->allRecordDisplayInventory( $inventoryid );

			foreach ( $inventory_item_id as $key => $value ) {
				$insert_data = array(
					'CaseId'          => $value->caseId,
					'AcoountId'       => $value->accountId,
					'InventoryItemId' => $value->inventoryItemId,
					'Date'            => $value->date,
					'Status'          => $value->status,
					'Deleted'         => $value->deleted,
					'ReportStartDate' => $value->report_start_date,
					'ReportEndDate'   => $value->report_end_date,
					'Case_Type'       => $value->Case_Type,
					'Reason'          => $value->Reason
				);

				$this->inventory_salvager_model->insertCaseLogDetailInventory( $insert_data );
			}

			$data = array(
				'caseId' => null,
				'date'   => $_POST['caseDate'],
				'status' => $_POST['case_status_detail'],
				'Reason' => null
			);
			$this->inventory_salvager_model->updateCaseBYId( $_POST['logId'], $data );

			$data = array( 'status' => '1' );
			$this->inventory_salvager_model->updateASIDCaseStatusToDOInvnetory( $inventoryid, $data );

			$data         = array( 'status' => '1' );
			$affected_row = $this->inventory_salvager_model->updateCaseStatusToDOInvnetory( $inventoryid, $data );

			if ( $affected_row > 0 ) {
				$this->session->set_flashdata( "success", "Case Detail succsssfully Update." );
				redirect( 'inventory_salvager/generatedInvetoryCases' );
			} else {
				redirect( 'inventory_salvager/generatedInvetoryCases' );
			}
		} else {
			$inventoryid       = $_POST['logId'];
			$inventory_item_id = $this->inventory_salvager_model->allRecordDisplayInventory( $inventoryid );
			foreach ( $inventory_item_id as $key => $value ) {
				$insert_data = array(
					'CaseId'          => $value->caseId,
					'AcoountId'       => $value->accountId,
					'InventoryItemId' => $value->inventoryItemId,
					'Date'            => $value->date,
					'Status'          => $value->status,
					'Deleted'         => $value->deleted,
					'ReportStartDate' => $value->report_start_date,
					'ReportEndDate'   => $value->report_end_date,
					'Case_Type'       => $value->Case_Type,
					'Reason'          => $value->Reason
				);

				$this->inventory_salvager_model->insertCaseLogDetailInventory( $insert_data );
			}

			$data         = array(
				'caseId' => $_POST['case__Id'],
				'date'   => $_POST['caseDate'],
				'status' => $_POST['case_status_detail'],
				'Reason' => null
			);
			$affected_row = $this->inventory_salvager_model->updateCaseBYId( $_POST['logId'], $data );
			if ( $affected_row > 0 ) {
				$this->session->set_flashdata( "success", "Case Detail succsssfully Update." );
				redirect( 'inventory_salvager/generatedInvetoryCases' );
			} else {
				redirect( 'inventory_salvager/generatedInvetoryCases' );
			}
		}
	}

	public function remove_user( $ID_ACCOUNT ) {
        $this->inventory_salvager_model->delete_case_by_account_id( $ID_ACCOUNT );
		$this->session->set_flashdata( "danger", "Case Detail succsssfully Deleted." );
		redirect( 'inventory_salvager/index' );
	}

    public function remove_user_inventory( $inventoryId )
    {


        exit;
        $this->inventory_salvager_model->delete_case_by_account_id_inventory( $inventoryId );
        $this->session->set_flashdata( "danger", "Case Detail succsssfully Deleted." );
        redirect( 'inventory_salvager/index' );
    }

	function user_display_data( $id )
    {
		$result = $this->inventory_salvager_model->getAllgeneratedCasesByUserId_Detail( $id );
		echo json_encode( $result );
		exit;
	}

	// This function use to get all user case status update
	public function updateCaseStatusUpdate() {
		$casestatus = $_POST['txtbox'];

		if ( $casestatus == 0 ) {
			$detail            = $_POST['selected'];
			$inventoryid       = explode( ',', $detail );
			$inventory_item_id = $this->inventory_salvager_model->allRecordDisplayInventory( $inventoryid );

			foreach ( $inventory_item_id as $key => $value ) {
				$insert_data = array(
					'CaseId'          => $value->caseId,
					'AcoountId'       => $value->accountId,
					'InventoryItemId' => $value->inventoryItemId,
					'Date'            => $value->date,
					'Status'          => $value->status,
					'Deleted'         => $value->deleted,
					'ReportStartDate' => $value->report_start_date,
					'ReportEndDate'   => $value->report_end_date,
					'Case_Type'       => $value->Case_Type,
					'Reason'          => $value->Reason
				);
				$this->inventory_salvager_model->insertCaseLogDetailInventory( $insert_data );
			}

			$data = array( 'status' => '1' );
			$this->inventory_salvager_model->updateCaseStatusToDOInvnetory( $inventoryid, $data );

			$data = array( 'status' => '1' );
			$this->inventory_salvager_model->updateASIDCaseStatusToDOInvnetory( $inventoryid, $data );

			$data = array( 'status' => $_POST['txtbox'], 'caseId' => null, 'Reason' => null );
			$this->inventory_salvager_model->updateCaseStatusDetail( $inventoryid, $data );
		} else if ( $casestatus == 3 ) {
			$caseDetailId      = $_POST['selected'];
			$inventoryid       = explode( ',', $caseDetailId );
			$inventory_item_id = $this->inventory_salvager_model->allRecordDisplayInventory( $inventoryid );

			foreach ( $inventory_item_id as $key => $value ) {
				$insert_data = array(
					'CaseId'          => $value->caseId,
					'AcoountId'       => $value->accountId,
					'InventoryItemId' => $value->inventoryItemId,
					'Date'            => $value->date,
					'Status'          => $value->status,
					'Deleted'         => $value->deleted,
					'ReportStartDate' => $value->report_start_date,
					'ReportEndDate'   => $value->report_end_date,
					'Case_Type'       => $value->Case_Type,
					'Reason'          => $value->Reason
				);

				$this->inventory_salvager_model->insertCaseLogDetailInventory( $insert_data );
			}
			$data = array( 'status' => $_POST['txtbox'], 'Reason' => null );
			$this->inventory_salvager_model->updateCaseStatusDetail( $inventoryid, $data );
		} else {
			$caseDetailId      = $_POST['selected'];
			$inventoryid       = explode( ',', $caseDetailId );
			$inventory_item_id = $this->inventory_salvager_model->allRecordDisplayInventory( $inventoryid );

			foreach ( $inventory_item_id as $key => $value ) {
				$insert_data = array(
					'CaseId'          => $value->caseId,
					'AcoountId'       => $value->accountId,
					'InventoryItemId' => $value->inventoryItemId,
					'Date'            => $value->date,
					'Status'          => $value->status,
					'Deleted'         => $value->deleted,
					'ReportStartDate' => $value->report_start_date,
					'ReportEndDate'   => $value->report_end_date,
					'Case_Type'       => $value->Case_Type,
					'Reason'          => $value->Reason
				);

				$this->inventory_salvager_model->insertCaseLogDetailInventory( $insert_data );
			}
			$CaseStatus = array( 'status' => $_POST['txtbox'], 'Reason' => null );
			$this->inventory_salvager_model->updateCaseStatusDetail( $inventoryid, $CaseStatus );
		}

		return true;
	}

}