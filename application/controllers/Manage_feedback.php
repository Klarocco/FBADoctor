<?php

/*
 * Generated by Webdimensions
 * www.webdimensions.co.in
 */

class Manage_feedback extends My_controller {

    function __construct() {
        parent::__construct();
        $this->load->model('amazon_feedback_report_model');
        $this->load->model('feedback_setting_model');
        $this->load->model('account_model');
        $this->load->model('feedback_asin_model');
        $this->load->model('feedback_history_model');
        $this->load->model('feedback_order_model');
        $this->load->model("user_model");
        $this->load->helper('email');
        $this->load->library('pagination');
        $this->load->model('subscription_model');
        $paymentinfo = $this->subscription_model->get_payment_info_by_accountid($this->user->info->ID_ACCOUNT);
        if (($this->user->info->feedbackfromemailaddress=='' || $this->user->info->mws_sellerid=='' ||  $this->user->info->mws_authtoken=='' || empty($paymentinfo['ID_PAYMENT'])) && !$this->user->info->admin)
            redirect(site_url("feedback_setting/setup"));
        $this->template->loadData("activeLink", array("manage_feedback" => array("general" => 1)));
    }

    /*
     * listing of nagative feedback order
     */

    public function display_nagative_feedback($col = 0, $sort = 0, $page = 0) {
        $page = intval($page);
        $col = intval($col);
        $sort = intval($sort);
        $sort_o = $sort;
        $col_o = $col;
        // Pagination
        $config['base_url'] = site_url("manage_feedback/display_nagative_feedback/" . $col . "/" . $sort);
        if ($col == 1) {
            $col = "feedback_history.orderid";
        } elseif ($col == 2) {
            $col = "feedback_history.feedbackdate";
        } elseif ($col == 3) {
            $col = "feedback_history.rating";
        } elseif ($col == 4) {
            $col = "feedback_history.comments";
        }
        if ($sort == 1) {
            $sort = "ASC";
        } else {
            $sort = "DESC";
        }
        $nagative_feedback = $this->amazon_feedback_report_model->get_nagative_feedback_by_account_id($this->user->info->ID_ACCOUNT, $page, $col, $sort, $type = 'nagative');
        $config['total_rows'] = $this->amazon_feedback_report_model->count_nagative_feedback_by_account_id($this->user->info->ID_ACCOUNT, $type = 'nagative');
        $config['per_page'] = 20;
        $config['uri_segment'] = 5;
        include (APPPATH . "/config/page_config.php");
        $this->template->loadData("activeLink", array("manage_feedback" => array("nagative_feedback" => 1)));
        $this->pagination->initialize($config);
        $this->template->loadContent("feedback_report/nagative_feedback_view.php", array(
            "nagative_feedback" => $nagative_feedback,
            "sort" => $sort_o,
            "col" => $col_o,
            "page" => $page
                )
        );
    }
    /*
     * listing of Neutral feedback 
     */
    public function display_neutral_feedback() {
        $this->template->loadData("activeLink", array("manage_feedback" => array("neutral_feedback" => 1)));
        $feedback =array();
        /*All User for Admin*/
        if(isset($this->user->info->admin) && !empty($this->user->info->admin)){
            $users = $this->user_model->getAllActiveUsers();
            foreach ($users as $key=>$user){
                $feedback[$key]['userInfo'] = $user;
                $feedback[$key]['feedBack'] = $this->amazon_feedback_report_model->get_nagative_feedback_by_account_id($user['ID_ACCOUNT']);
            }
        }
        else{
            $feedback= $this->amazon_feedback_report_model->get_nagative_feedback_by_account_id($this->user->info->ID_ACCOUNT);
        }

        $this->template->loadContent("feedback_report/neutral_feedback_view.php", array("feedback" => $feedback));
    }
    /*
     * listing of Positive feedback order
     */

    public function display_positive_feedback($col = 0, $sort = 0, $page = 0) {
        $page = intval($page);
        $col = intval($col);
        $sort = intval($sort);
        $sort_o = $sort;
        $col_o = $col;
        // Pagination
        $config['base_url'] = site_url("get_amazon_feedback_report/display_positive_feedback/" . $col . "/" . $sort);
        if ($col == 1) {
            $col = "feedback_history.orderid";
        } elseif ($col == 2) {
            $col = "feedback_history.feedbackdate";
        } elseif ($col == 3) {
            $col = "feedback_history.rating";
        } elseif ($col == 4) {
            $col = "feedback_history.comments";
        }
        if ($sort == 1) {
            $sort = "ASC";
        } else {
            $sort = "DESC";
        }
        $account_id = $this->user->info->ID_ACCOUNT;
        $positive_feedback = $this->amazon_feedback_report_model->get_positive_feedback_by_account_id($account_id, $page, $col, $sort);
        $config['total_rows'] = $this->amazon_feedback_report_model->count_positive_feedback_by_account_id($this->user->info->ID_ACCOUNT);
        $config['per_page'] = 20;
        $config['uri_segment'] = 5;
        include (APPPATH . "/config/page_config.php");
        $this->template->loadData("activeLink", array("get_amazon_feedback_report" => array("positive_feedback" => 1)));
        $this->pagination->initialize($config);
        $this->template->loadContent("feedback_report/positive_feedback_view.php", array(
            "positive_feedback" => $positive_feedback,
            "sort" => $sort_o,
            "col" => $col_o,
            "page" => $page
                )
        );
    }

    /*
     * get ajax call respond of nagative feedback order
     */

    public function getRespondFeedback($accountId,$orderId) {
        $flag = 0;
        $orderRow = $this->amazon_feedback_report_model->get_feedback_respond_data($accountId, $orderId);
        if (empty($orderRow)) {
            echo $flag; exit;
        }
        else{
            $t = time();
            // Amazon allows responding up to 60 days after the feedback date.
            $last60days = $t - (6000 * 24 * 6000 * 6000);

            if ($orderRow['feedbackdate'] < $last60days) {
                $value = 0;
                echo json_encode($value);
                exit;
            }
            else{
                $orderRow['purchasedate'] = date("j F Y h:i:s A", $orderRow['purchasedate']);
                $orderRow['fba'] = ($orderRow['fba'] == 1 ? '<img src="' . base_url() . 'images/amzsmalllogo.png" alt="FBA" />' : '');
                $orderRow['orderidlink'] = '<a href="https://sellercentral.amazon.com/gp/orders-v2/details?ie=UTF8&orderID=' . $orderRow['orderid'] . '"><b>' . $orderRow['orderid'] . '</b></a>';
                $subject = RESPOND_NEGATIVE_FEEDBACK_SUBJECT;
                $message = RESPOND_NEGATIVE_FEEDBACK_MESSAGE;
                $fullMsg = htmlspecialchars('<html>
						<head>
						<title></title>
						</head>
						<body>
						' . nl2br($message) . '
						</body>
          </html>', ENT_QUOTES, "ISO-8859-1");
                $subject = $this->common->DoPersonalizedFields($subject, $orderRow);
                $message = $this->common->DoPersonalizedFields($fullMsg, $orderRow);
                $data = array(
                    "order" => $orderRow,
                    "subject" => $subject,
                    "message" => $message,
                );
                $this->load->view('feedback_report/ajaxrespondfeedback.php', $data);
            }
        }


    }

    /*
     * send email for remove nagative feedback 
     */

    public function send_nagative_feedback_remove_mail() {
        $toaddress = $_POST['toemailadd'];
        $fromaddress = $_POST['fromadd'];
        $subject = $_POST['subject'];
        $msg = $_POST['msg'];
        $msgdata = mysqli_real_escape_string($this->db->conn_id, $msg);
        $this->load->library('email');
        $this->email->set_newline("\r\n");
        $this->email->from($fromaddress);
        $this->email->subject($subject);
        $this->email->to($toaddress);
        $this->email->message($msgdata);

        if ($this->email->send()){
            $intValue = 1;
            $stringValue = "Mail Send Successfully";
            $data = array("intValue" => $intValue, "stringValue" => $stringValue);
            echo json_encode($data);exit;
        }
        else{
            $intValue = 0;
            $stringValue = "Error in Sending Mail";
            $data = array("intValue" => $intValue, "stringValue" => $stringValue);
            echo json_encode($data);exit;
        }


    }

    /*
     * get order information 
     */

    public function get_orderinfo_by_order_id($accountId,$orderId){
        $flag = 0;
        $orderRow = $this->amazon_feedback_report_model->get_feedback_respond_data($accountId, $orderId);
        if($orderRow){
            echo json_encode($orderRow);
            exit;
        }
        else{
            echo $flag;exit;
        }
    }

    /*
     * Insert Feedback note
     */

    public function add_feedback_notes() {
        if (isset($_POST['note'])) {
            $note = $_POST['note'];
        }
        if (isset($_POST['order_id'])) {
            $id_order = $_POST['order_id'];
        }
        $data = array(
            'ID_ACCOUNT' => $this->user->info->ID_ACCOUNT,
            'ID_ORDER' => $id_order,
            'datecreated' => time(),
            'note' => $note,
        );
        $result_data = $this->amazon_feedback_report_model->insert_feedback_notes($data);
        if (!empty($result_data)) {
            echo "Note Sucessfully Saved";
        }
    }

    /*
     * Get Note all note by order id 
     */

    public function get_notes_by_order_id() {
        $order_id = $_POST['order_id'];
        $params = array(
            'ID_ACCOUNT' => $this->user->info->ID_ACCOUNT,
            'ID_ORDER' => $order_id,
        );
        $notes = $this->amazon_feedback_report_model->get_all_notes_by_account_id($params);
        echo json_encode($notes);
    }

    /*
     * listing of sent emails 
     */

    public function display_sent_email_info($col = 0, $sort = 0, $page = 0) {
        $page = intval($page);
        $col = intval($col);
        $sort = intval($sort);
        $sort_o = $sort;
        $col_o = $col;
        // Pagination
        $config['base_url'] = site_url("manage_feedback/display_sent_email_info/" . $col . "/" . $sort);
        if ($col == 1) {
            $col = "p.datetosend";
        } elseif ($col == 2) {
            $col = "p.emailtype";
        } elseif ($col == 3) {
            $col = "o.orderid";
        } elseif ($col == 4) {
            $col = "o.buyername";
        }
        if ($sort == 1) {
            $sort = "ASC";
        } else {
            $sort = "DESC";
        }
        $sent = 1;
        $sent_email_data = $this->amazon_feedback_report_model->get_email_sent_data_by_account_id($this->user->info->ID_ACCOUNT, $page, $col, $sort, $sent);
        $parms = array(
            "sent" => $sent,
            "ID_ACCOUNT" => $this->user->info->ID_ACCOUNT,
            "removed" => 0
        );
        $config['total_rows'] = $this->amazon_feedback_report_model->count_sent_email_data_by_accountid($parms);
        include (APPPATH . "/config/page_config.php");
        $this->template->loadData("activeLink", array("Email_builder" => array("sent_email" => 1)));
        $this->pagination->initialize($config);
        $this->template->loadContent("feedback_report/sent_email_view.php", array(
            "sent_email_data" => $sent_email_data,
            "sort" => $sort_o,
            "col" => $col_o,
            "page" => $page
                )
        );
    }

    /*
     * listing of pending emails
     */

    public function display_pending_email_info($col = 0, $sort = 0, $page = 0) {
        // Pagination
        $config['per_page'] = 10;
        $config['uri_segment'] = 5;
        $page = intval($page);
        $col = intval($col);
        $sort = intval($sort);
        $sort_o = $sort;
        $col_o = $col;
        $config['base_url'] = site_url("manage_feedback/display_pending_email_info/" . $col . "/" . $sort);
        if ($col == 1) {
            $col = "p.datetosend";
        } elseif ($col == 2) {
            $col = "p.emailtype";
        } elseif ($col == 3) {
            $col = "o.orderid";
        } elseif ($col == 4) {
            $col = "o.buyername";
        }
        if ($sort == 1) {
            $sort = "ASC";
        } else {
            $sort = "DESC";
        }
        $sent = 0;
        $pending_email_data = $this->amazon_feedback_report_model->get_email_sent_data_by_account_id($this->user->info->ID_ACCOUNT, $page, $col, $sort, $sent);
        $parms = array(
            "sent" => $sent,
            "ID_ACCOUNT" => $this->user->info->ID_ACCOUNT,
            "removed" => 0
        );
        $config['total_rows'] = $this->amazon_feedback_report_model->count_sent_email_data_by_accountid($parms);
        include (APPPATH . "/config/page_config.php");
        $this->template->loadData("activeLink", array("Email_builder" => array("pending_email" => 1)));
        $this->pagination->initialize($config);
        $this->template->loadContent("feedback_report/pending_emails_view.php", array(
            "pending_email_data" => $pending_email_data,
            "sort" => $sort_o,
            "col" => $col_o,
            "page" => $page
                )
        );
    }

}
