<?php

/* Generated by Webdimensions  www.webdimensions.co.in */

class Generate_Inventory_loss_case extends CI_controller
{

    function __construct()
    {
        parent::__construct();
        if (!$this->input->is_cli_request())
        {
            show_404();
        }
        $this->load->library('amazon');
        $this->load->model("user_model");
        $this->load->model("reimbursement_model");
        $this->load->model("inventory_salvager_model");
        $this->load->model("Inventory_salvager_model_historical");
        $this->load->model("Case_log_model");
        $this->load->library('rat');
        $this->logging = new Rat();
    }

    public function index()
    {
        $cronName = "Generate Loss Inventory Case Daily";
        $content = date("d-m-Y H:i:s") . " " . "Generate Loss Inventory case Daily cron Start";
        $this->logging->write_log($cronName, $content, 1, 0);
        $inventoryCaseRecord = array();
        $allUsers = $this->user_model->getAllActiveUsers();
        foreach ($allUsers as $user)
        {
            $allRecordsFetched = $this->reimbursement_model->gethistorycronstatusbyaccountid($user['ID_ACCOUNT']);
            if(!empty($allRecordsFetched))
            {
                if ($allRecordsFetched['InventoryStatus'] == 1 && $allRecordsFetched['ReimburseStatus'] == 1)
                {
                    $reimburseDate = date('Y-m-d');
                    $startDate = date('Y-m-d', strtotime($reimburseDate . ' - 18 months'));
                    $endDate = date('Y-m-d', strtotime($reimburseDate . ' - 1 month'));
                    $alllossInventoryCounts = $this->inventory_salvager_model->getalllostInventoryCount($user['ID_ACCOUNT'], $startDate . ' 00:00:00', $endDate . ' 23:59:59');
                    foreach ($alllossInventoryCounts as $lossInventory)
                    {
                        $allfoundInventoryCount = $this->inventory_salvager_model->getallfoundInventoryCount($user['ID_ACCOUNT'], $startDate . ' 00:00:00', $reimburseDate . ' 23:59:59', $lossInventory['fnsku']);
                        if ($allfoundInventoryCount)
                        {
                            $lossInventoryDetails = $this->inventory_salvager_model->getalllostInventoryDetails($user['ID_ACCOUNT'], $startDate . ' 00:00:00', $endDate . ' 23:59:59', $lossInventory['fnsku']);
                            $foundInventoryDetails = $this->inventory_salvager_model->getallfoundInventoryDetail($user['ID_ACCOUNT'], $startDate . ' 00:00:00', $reimburseDate . ' 23:59:59', $lossInventory['fnsku']);
                            if (abs($lossInventory['TotalQty']) > $allfoundInventoryCount['TotalFoundQty'])
                            {
                                $remainingLossInventory = $lossInventory['TotalQty'] + $allfoundInventoryCount['TotalFoundQty'];
                                $reimburseInventoryCount = $this->inventory_salvager_model->getallReimbursementCount($user['ID_ACCOUNT'], $startDate . ' 00:00:00', $reimburseDate . ' 23:59:59', $lossInventory['fnsku']);
                                if ($reimburseInventoryCount['TotalReimbursementQty'])
                                {
                                    $reimburseInventoryDetails = $this->inventory_salvager_model->getallReimbursementDetails($user['ID_ACCOUNT'], $startDate . ' 00:00:00', $reimburseDate . ' 23:59:59', $lossInventory['fnsku']);
                                    if ($remainingLossInventory > $reimburseInventoryCount['TotalReimbursementQty'])
                                    {
                                        $generatecaseLostInventory = $remainingLossInventory + $reimburseInventoryCount['TotalReimbursementQty'];
                                        $this->generatecaseUpdatelostinventory($generatecaseLostInventory, $lossInventoryDetails, $startDate, $endDate);
                                        $this->updatereimbursedetail($reimburseInventoryCount['TotalReimbursementQty'], $reimburseInventoryCount['TotalReimbursementQty'], $reimburseInventoryDetails);
                                    }
                                    else
                                    {
                                        $remainingReimbuirsementInventory = $reimburseInventoryCount['TotalReimbursementQty'] + $remainingLossInventory;
                                        $generatecaseLostInventory = 0;
                                        $this->updatereimbursedetail($remainingReimbuirsementInventory, $reimburseInventoryCount['TotalReimbursementQty'], $reimburseInventoryDetails);
                                        $this->generatecaseUpdatelostinventory($generatecaseLostInventory, $lossInventoryDetails, $startDate, $endDate);
                                    }
                                }
                                else
                                {
                                    $this->updatefoundinventory('0', $allfoundInventoryCount['TotalFoundQty'], $foundInventoryDetails);
                                    $this->generatecaseUpdatelostinventory($remainingLossInventory, $lossInventoryDetails, $startDate, $endDate);
                                }
                            }
                            else
                            {
                                $remainingfoundInventory = $lossInventory['TotalQty'] + $allfoundInventoryCount['TotalFoundQty'];
                                $this->updatefoundinventory($remainingfoundInventory, $allfoundInventoryCount['TotalFoundQty'], $foundInventoryDetails);
                                $this->generatecaseUpdatelostinventory('0', $lossInventoryDetails, $startDate, $endDate);
                            }
                        }
                    }
                }
            }
        }
        $content = date("d-m-Y H:i:s") . " " . "Generate Loss Inventory Case Daily cron End";
        $this->logging->write_log($cronName, $content, 3, 0);
    }

    public function generatecaseUpdatelostinventory($generatecaseLostInventory, $lossInventoryDetails, $startDate, $endDate)
    {
        $arrCaseID = array();
        echo "GenerateInventorycase";
        $cronName = "Generate Missing Found Inventory Case";
        foreach ($lossInventoryDetails as $index => $lostInventory)
        {
            if ($index < abs($generatecaseLostInventory))
            {
                $casetype = 'ULFW';
                $caseDetail = array(
                    'accountId' => $lostInventory['ID_ACCOUNT'],
                    'inventoryItemId' => $lostInventory['transaction_item_id'],
                    'date' => date('Y-m-d H:i:s'),
                    'report_start_date' => $startDate,
                    'report_end_date' => $endDate. ' 23:59:59'
                );
                $t = time();
                $this->Inventory_salvager_model_historical->insertCaseId($caseDetail);
                $log_data = array('ID_ACCOUNT' => $lostInventory['ID_ACCOUNT'], 'case_type' => $casetype, 'inventory_order_id' => $lostInventory['transaction_item_id'], 'timestamp' => $t);
                $arrCaseID[] = $this->Case_log_model->addcaselog($log_data);
                $data = array('status' => '1', 'case_type' => $casetype);
                $this->Inventory_salvager_model_historical->updateInventoryDetailsData($data, $lostInventory['transaction_item_id'], $lostInventory['ID_ACCOUNT']);
            }
            else
            {
                $data = array('status' => '1');
                $this->Inventory_salvager_model_historical->updateInventoryDetailsData($data, $lostInventory['transaction_item_id'], $lostInventory['ID_ACCOUNT']);
            }
            if (!empty($arrCaseID))
            {
                $strCases = implode(",", $arrCaseID);
                $content = "Generated Inventory Cases :" . $strCases;
                $this->logging->write_log($cronName, $content, 2, $lostInventory['ID_ACCOUNT']);
            }
        }
    }

    public function updatefoundinventory($foundInventory= '', $foundInventoryCount, $foundInventoryDetails)
    {
        $foundInventoryCount = $foundInventoryCount-1;
        if ($foundInventory == '')
            $foundInventory = 0;
        while ($foundInventoryCount >= $foundInventory)
        {
            echo "updateInventoryFound";
            $this->Inventory_salvager_model_historical->updatefoundDetailsById($foundInventoryDetails[$foundInventoryCount]['id']);
            $foundInventoryCount--;
        }
    }

    public function updatereimbursedetail($remainingReimbuirsementInventory = '', $reimburseInventoryCount, $reimburseInventoryDetails)
    {
        if ($remainingReimbuirsementInventory == '')
            $remainingReimbuirsementInventory = 0;
        while ($reimburseInventoryCount >= $remainingReimbuirsementInventory)
        {
            echo "updateInventoryReimbursement";
            $this->Inventory_salvager_model_historical->updateReimburseDetailsById($reimburseInventoryDetails[$reimburseInventoryCount]['id']);
            $reimburseInventoryCount--;
        }
    }
}