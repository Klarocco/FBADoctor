<?php /* Generated by Webdimensions  www.webdimensions.co.in */

class Get_amazon_fba_order extends CI_Controller
{

    function __construct()
    {
        parent::__construct();
        if (!$this->input->is_cli_request()) {
            show_404();
        }

        $this->load->library('amazon');
        $this->load->model('reimbursement_model');
        $this->load->model('feedback_fba_order_model');
        $this->load->model('feedback_setting_model');
        $this->load->model('amazon_report_request_log_model');
        $this->load->model('amazon_api_log_model');
        $this->load->model('feedback_asin_model');
        $this->load->library('rat');
        $this->logging = new Rat();
        $this->cronName = "FBA Order Fetch Cron";
    }

    function index()
    {
        $content = date("d-m-Y H:i:s") . " " . "Order Fetch Cron Start";
        $this->logging->write_log($this->cronName, $content, 1, 0);
        $result = $this->feedback_fba_order_model->get_fba_order_feedback_setting();
        $this->getfbaorderfromamazon($result);
    }

    function getfbaorderfromamazon($result)
    {
        global $store, $AMAZON_SERVICE_URL;
        foreach ($result->result() as $row) {
            $count= 0;
            $result = $this->reimbursement_model->getAmzDateIterationByAccountId($row->ID_ACCOUNT);
            if($result)
            {
                foreach ($result as $key => $record)
                {
                    if ($record['OrderStatus'] == 1)
                    {
                        $count++;
                    }
                }
                $totalCount = count($result);
                if ($totalCount == $count) {
                    $feedStatus = 1;
                    $ReportRequestId = "";
                    $GeneratedReportId = '';
                    $store[$row->amazonstorename]['ID_ACCOUNT'] = $row->ID_ACCOUNT;
                    $store[$row->amazonstorename]['merchantId'] = $row->mws_sellerid; //Merchant ID for this store
                    $store[$row->amazonstorename]['marketplaceId'] = $row->marketplace_id; //Marketplace ID for this store
                    $store[$row->amazonstorename]['keyId'] = $row->access_key; //Access Key ID
                    $store[$row->amazonstorename]['secretKey'] = $row->secret_key; //Secret Access Key for this store
                    $store[$row->amazonstorename]['MWSAuthToken'] = $row->mws_authtoken; //Secret Access Key for this store
                    $AMAZON_SERVICE_URL = $row->host;
                    $searchArrayLogRow = array('status !=' => 2, 'reporttype =' => '_GET_AMAZON_FULFILLED_SHIPMENTS_DATA_', 'ID_ACCOUNT =' => $row->ID_ACCOUNT);
                    $logRow = $this->amazon_report_request_log_model->get_log_result($searchArrayLogRow);
                    if (!empty($logRow->requestid))
                        $ReportRequestId = $logRow->requestid;
                    if (empty($ReportRequestId)) {
                        try {
                            echo 'Getting fba order data';

                            $this->amazon_api_log_model->add_amazon_api_log($row->ID_ACCOUNT, 'getorderdata1');
                            $objAmazonReportRequest = new AmazonReportRequest($row->amazonstorename);
                            print_r($objAmazonReportRequest);
                            echo '<br>Previous Day Data.<br>';
                            $date= date('Y-m-d H:i:s');
                            $previousDate = date('Y-m-d', strtotime($date .' -4 day'));
                            $startDate = $previousDate." 00:00:00";
                            $objAmazonReportRequest->setTimeLimits($startDate,$date);
                            $objAmazonReportRequest->setReportType("_GET_AMAZON_FULFILLED_SHIPMENTS_DATA_");
                            $objAmazonReportRequest->requestReport();
                            $response = $objAmazonReportRequest->getResponse();
                            $feedStatus = 0;
                            $fulldataload = 0;
                            if (!empty($response['ReportRequestId']))
                            {
                                $ReportRequestId = $response['ReportRequestId'];
                                $feedStatus = 1;
                                if ($response['ReportProcessingStatus'] == '_DONE_NO_DATA_' || $response['ReportProcessingStatus'] == '_CANCELLED_') {
                                    echo 'No Data!!!!!!';
                                    $feedStatus = 2;
                                }
                                if ($response['ReportProcessingStatus'] == '_DONE_NO_DATA_' || $response['ReportProcessingStatus'] == '_DONE_' && $row->loadedfirstorderfba = 0) {
                                    $fulldataload = 1;
                                    $feedStatus = 2;
                                }
                                print_r($response);
                                $t = time();

                                $addReportRequestLogParams = array(
                                    'ID_ACCOUNT' => $row->ID_ACCOUNT,
                                    'logdate' => $t,
                                    'reporttype' => '_GET_AMAZON_FULFILLED_SHIPMENTS_DATA_',
                                    'requestid' => $ReportRequestId,
                                    'status' => $feedStatus,
                                    'fulldataload' => $fulldataload
                                );

                                $this->amazon_report_request_log_model->add_amazon_report_request_log($addReportRequestLogParams);
                                if ($fulldataload == 1)
                                {
                                    $this->feedback_setting_model->update_feedback_setting($row->ID_ACCOUNT, array(
                                        'loadedfirstorderfba' => '1',
                                        'hourlimit_orderfba' => "hourlimit_orderfba+1",
                                    ));
                                }
                            }
                        }
                        catch (Exception $ex)
                        {
                            $feedStatus = 0;
                            $content = date("d-m-Y H:i:s") . " " . "Order Fetch Cron Start :RequestReportList " . $ex->getMessage();
                            $this->logging->write_log($this->cronName, $content, 1, 0);
                        }
                    }

                    if ($feedStatus == 1 && !empty($ReportRequestId) && empty($GeneratedReportId)) {
//                  sleep(60);
                        // Get GeneratedReportId
                        try {
                            echo 'Getting generated report id';
                            $this->amazon_api_log_model->add_amazon_api_log($row->ID_ACCOUNT, 'getorderdata2');
                            $objAmazonReportRequestList = new AmazonReportRequestList($row->amazonstorename);
                            $objAmazonReportRequestList->setRequestIds($ReportRequestId);
                            $works = $objAmazonReportRequestList->fetchRequestList();
                            $response = $objAmazonReportRequestList->getList();
                            echo "<pre />";
                            print_r($objAmazonReportRequestList) . "<br>";
                            print_r($response) . "<br>";
                            $feedStatus = 0;
                            if (!empty($response[0]['GeneratedReportId'])) {
                                $GeneratedReportId = $response[0]['GeneratedReportId'];
                                $feedStatus = 1;
                            }
                            if ($response[0]['ReportProcessingStatus'] == '_DONE_NO_DATA_' || $response[0]['ReportProcessingStatus'] == '_CANCELLED_') {
                                echo 'No Data!!!!!!';
                                $feedStatus = 2;
                                if (!empty($logRow->ID_LOG)) {
                                    $this->amazon_report_request_log_model->custom_where_update_amazon_report_request_log(array('ID_LOG =' => $logRow->ID_LOG), array(
                                        'status' => '2'
                                    ));
                                }
                            }
                            $this->feedback_setting_model->update_feedback_setting($row->ID_ACCOUNT, array(
                                'hourlimit_orderfba ' => "hourlimit_orderfba + 1",
                            ));
                        } catch (Exception $ex) {
                            $feedStatus = 0;
                            $content = date("d-m-Y H:i:s") . " " . "Order Fetch Cron Start :RequestReportList " . $ex->getMessage();
                            $this->logging->write_log($this->cronName, $content, 1, 0);
                        }
                    }
                    if ($feedStatus == 1 && !empty($GeneratedReportId)) {
                        try {
                            echo 'Getting report';
                            $this->amazon_api_log_model->add_amazon_api_log($row->ID_ACCOUNT, 'getorderdata3');
                            $objAmazonReportRequestList = new AmazonReport($row->amazonstorename);
                            $objAmazonReportRequestList->setReportId($GeneratedReportId);
                            $objAmazonReportRequestList->fetchReport();
                            $data = $objAmazonReportRequestList->returnReport();
                            if (!empty($data)) {
                                // print_r($data);
                                $lineCount = 0;
                                $tmp = explode("\n", $data);
                                $arrorderId = array();
                                foreach ($tmp as $line) {
                                    print_r($line);
                                    if ($lineCount > 0) {
                                        $fieldData = explode("\t", $line);
                                        $orderid = addslashes($fieldData[0]);
                                        $merchantorderid = addslashes($fieldData[1]); // new
                                        $shipmentid = addslashes($fieldData[2]); // new
                                        $shipmentitemid = addslashes($fieldData[3]); // new
                                        $orderitemid = addslashes($fieldData[4]);
                                        $merchantorderitemid = addslashes($fieldData[5]); // new
                                        $purchasedateorginal = addslashes($fieldData[6]);
                                        $purchasedate = strtotime($purchasedateorginal);
                                        $paymentsdateorginal = addslashes($fieldData[7]);
                                        $paymentsdate = strtotime($paymentsdateorginal);
                                        $shipmentdateorginal = addslashes($fieldData[8]); // new
                                        $shipmentdate = strtotime($shipmentdateorginal);
                                        $reportingdateorginal = addslashes($fieldData[9]); // new
                                        $reportingdate = strtotime($reportingdateorginal);
                                        $buyeremail = addslashes($fieldData[10]);
                                        $buyername = addslashes($fieldData[11]);
                                        $buyerphone = addslashes($fieldData[12]);
                                        $sku = addslashes($fieldData[13]);
                                        $productname = addslashes($fieldData[14]);
                                        $quantity = addslashes($fieldData[15]);
                                        $currency = addslashes($fieldData[16]);
                                        $itemprice = (double)addslashes($fieldData[17]);
                                        $itemtax = (double)addslashes($fieldData[18]);
                                        $shippingprice = (double)addslashes($fieldData[19]);
                                        $shippingtax = (double)addslashes($fieldData[20]);
                                        $giftwrapprice = (double)addslashes($fieldData[21]);  // new
                                        $giftwraptax = (double)addslashes($fieldData[22]);  // new
                                        $shipservicelevel = addslashes($fieldData[23]);
                                        $shiprecipient = addslashes($fieldData[24]);
                                        $shipaddress1 = addslashes($fieldData[25]);
                                        $shipaddress2 = addslashes($fieldData[26]);
                                        $shipaddress3 = addslashes($fieldData[27]);
                                        $shipcity = addslashes($fieldData[28]);
                                        $shipstate = addslashes($fieldData[29]);
                                        $shipzip = addslashes($fieldData[30]);
                                        $shipcountry = addslashes($fieldData[31]);
                                        $shipphone = addslashes($fieldData[32]);
                                        $billaddress = addslashes($fieldData[33]);
                                        $billaddress2 = addslashes($fieldData[34]);
                                        $billaddress3 = addslashes($fieldData[35]);
                                        $billcity = addslashes($fieldData[36]);
                                        $billstate = addslashes($fieldData[37]);
                                        $billzip = addslashes($fieldData[38]);
                                        $billcountry = addslashes($fieldData[39]);
                                        // New
                                        $itempromtiondiscount = (double)addslashes($fieldData[40]);
                                        $shippingpromtiondiscount = (double)addslashes($fieldData[41]);
                                        $shippingcarrier = addslashes($fieldData[42]);
                                        $trackingnumber = addslashes($fieldData[43]);
                                        $estimatedarrivaldateorginal = addslashes($fieldData[44]);
                                        $estimatedarrivaldate = strtotime($estimatedarrivaldateorginal);
                                        $fulfillmentcenter = addslashes($fieldData[45]);
                                        $fulfillmentchannel = addslashes($fieldData[46]);
                                        $saleschannel = addslashes($fieldData[47]);
                                        if (!empty($saleschannel)) {
                                            $marketplaceidforSalesChannel = $this->common->GetMarketPlaceIDFromSalesChannel($saleschannel);
                                        }
                                        if (empty($marketplaceidforSalesChannel))
                                            $marketplaceidforSalesChannel = $row->marketplace_id;
                                        $queryArray['ID_ACCOUNT'] = $row->ID_ACCOUNT;
                                        $queryArray['orderid'] = $orderid;
                                        $queryArray['sku'] = $sku;
                                        $totalRow = $this->feedback_fba_order_model->custom_count_feedback_order($queryArray);
                                        if ($totalRow == 0 && !empty($orderid)) {
                                            $result = json_decode($this->common->GetProductImgad_Asin($row->amazonstorename, $row->ID_ACCOUNT, $sku));

                                            $orderParam = array(
                                                'ID_ACCOUNT' => $row->ID_ACCOUNT,
                                                'orderid' => $orderid,
                                                'orderitemid' => $orderitemid,
                                                'purchasedateorginal' => $purchasedateorginal,
                                                'purchasedate' => $purchasedate,
                                                'paymentsdateorginal' => $paymentsdateorginal,
                                                'paymentsdate' => $paymentsdate,
                                                'buyeremail' => $buyeremail,
                                                'buyername' => $buyername,
                                                'buyerphone' => $buyerphone,
                                                'sku' => $sku,
                                                'productname' => $productname,
                                                'quantity' => $quantity,
                                                'currency' => $currency,
                                                'itemprice' => $itemprice,
                                                'itemtax' => $itemtax,
                                                'shippingprice' => $shippingprice,
                                                'shippingtax' => $shippingtax,
                                                'shipservicelevel' => $shipservicelevel,
                                                'shiprecipient' => $shiprecipient,
                                                'shipaddress1' => $shipaddress1,
                                                'shipaddress2' => $shipaddress2,
                                                'shipaddress3' => $shipaddress3,
                                                'shipcity' => $shipcity,
                                                'shipstate' => $shipstate,
                                                'shipzip' => $shipzip,
                                                'shipcountry' => $shipcountry,
                                                'shipphone' => $shipphone,
                                                'fba' => 1,
                                                'merchantorderid' => $merchantorderid,
                                                'shipmentid' => $shipmentid,
                                                'shipmentitemid' => $shipmentitemid,
                                                'merchantorderitemid' => $merchantorderitemid,
                                                'shipmentdateorginal' => $shipmentdateorginal,
                                                'shipmentdate' => $shipmentdate,
                                                'reportingdate' => $reportingdate,
                                                'reportingdateorginal' => $reportingdateorginal,
                                                'giftwrapprice' => $giftwrapprice,
                                                'giftwraptax' => $giftwraptax,
                                                'itempromtiondiscount' => $itempromtiondiscount,
                                                'shippingpromtiondiscount' => $shippingpromtiondiscount,
                                                'shippingcarrier' => $shippingcarrier,
                                                'trackingnumber' => $trackingnumber,
                                                'estimatedarrivaldateorginal' => $estimatedarrivaldateorginal,
                                                'estimatedarrivaldate' => $estimatedarrivaldate,
                                                'fulfillmentcenter' => $fulfillmentcenter,
                                                'fulfillmentchannel' => $fulfillmentchannel,
                                                'saleschannel' => $saleschannel,
                                                'small_img_url' => $result->small_url
                                            );

                                            $arrorderId[] = $this->feedback_fba_order_model->add_feedback_order($orderParam);

                                            // Insert the SKU tag for asins if not unique
                                            $totalRow = $this->feedback_fba_order_model->custom_count_feedback_order(array('ID_ACCOUNT =' => $row->ID_ACCOUNT, 'sku =' => $sku));
                                            if ($totalRow['total'] == 0) {
                                                // If not insert the asins tags
                                                $asinID = $this->feedback_asin_model->add_feedback_asin($row->ID_ACCOUNT, $sku, $row->marketplace_id, $result->asin);
                                            }
                                        }
                                    }
                                    $lineCount++;
                                }
                                if (!empty($arrorderId)) {
                                    $strCases = implode(",", $arrorderId);
                                    $content = "Order Id's Added :" . $strCases;
                                    $this->logging->write_log($this->cronName, $content, 2, $row->ID_ACCOUNT);
                                }
                            }
                            // Feedback settings date
                            $t = time();
                            $this->feedback_setting_model->update_feedback_setting($row->ID_ACCOUNT, array(
                                'api_fbaorderdate ' => $t,
                                'hourlimit_orderfba ' => "5"
                            ));
                            // Update the request id
                            $this->amazon_report_request_log_model->custom_where_update_amazon_report_request_log(array('ID_ACCOUNT =' => $row->ID_ACCOUNT, 'requestid =' => $ReportRequestId), array(
                                'status' => '2'
                            ));
                        } catch (Exception $ex) {
                            $feedStatus = 0;
                            $content = date("d-m-Y H:i:s") . " " . "Order Fetch Cron Start :RequestReportList " . $ex->getMessage();
                            $this->logging->write_log($this->cronName, $content, 1, 0);
                        }
                    }
                }
                else{
                    echo "<br>Historical Data is Remaining to Fetch.<br>";
                }
            }
            else{
                $content = date("d-m-Y H:i:s") . " AmzDateIteration Data is not Available."  . "Order Fetch Cron.";
                $this->logging->write_log($this->cronName, $content, 1, 0);
            }
        }
        $content = date("d-m-Y H:i:s") . " " . "Order Fetch Cron End.";
        $this->logging->write_log($this->cronName, $content, 3, 0);
    }

}
