<?php /* Generated by Webdimensions  www.webdimensions.co.in */
class Get_amazon_customer_shipment_sales extends CI_Controller {

    function __construct() {
        parent::__construct();
        if (!$this->input->is_cli_request()) {
            show_404();
        }
        $this->load->library('amazon');
        $this->load->model('reimbursement_model');
        $this->load->model('feedback_fba_order_model');
        $this->load->model('feedback_setting_model');
        $this->load->model('amazon_report_request_log_model');
        $this->load->model('amazon_api_log_model');
        $this->load->model('account_model');
        $this->load->model('feedback_asin_model');
        $this->load->model('Refund_rescuer_model');
            $this->load->model('Customer_shipment_sales_model');
        $this->load->library('rat');
        $this->logging = new Rat();
        $this->cronName = "Customer Shipment Sales Cron";
    }

    function index() {
        $content = date("d-m-Y H:i:s") . " " . "Customer Shipment Sales Cron Start";
        $this->logging->write_log($this->cronName, $content, 1, 0);
        $result = $this->Customer_shipment_sales_model->get_customer_sales_feedback_setting();
        $this->getfbaorderfromamazon($result);
    }

    function getfbaorderfromamazon($result) {
        global $store, $AMAZON_SERVICE_URL;
        foreach ($result->result() as $row) {
            $count= 0;
            $result = $this->reimbursement_model->getAmzDateIterationByAccountId($row->ID_ACCOUNT);
            if($result){
                foreach ($result as $key=>$record){
                    if($record['CustomersalesStatus']==1){
                        $count++;
                    }
                }
                $totalCount = count($result);
                if($totalCount==$count){
                    $feedStatus = 1;
                    $ReportRequestId = "";
                    $GeneratedReportId = '';
                    $store[$row->amazonstorename]['ID_ACCOUNT'] = $row->ID_ACCOUNT;
                    $store[$row->amazonstorename]['merchantId'] = $row->mws_sellerid; //Merchant ID for this store
                    $store[$row->amazonstorename]['marketplaceId'] = $row->marketplace_id; //Marketplace ID for this store
                    $store[$row->amazonstorename]['keyId'] = $row->access_key; //Access Key ID
                    $store[$row->amazonstorename]['secretKey'] = $row->secret_key; //Secret Access Key for this store
                    $store[$row->amazonstorename]['MWSAuthToken'] = $row->mws_authtoken; //Secret Access Key for this store
                    $AMAZON_SERVICE_URL = $row->host;
                    $searchArrayLogRow = array('status !=' => 2, 'reporttype =' => '_GET_FBA_FULFILLMENT_CUSTOMER_SHIPMENT_SALES_DATA_', 'ID_ACCOUNT =' => $row->ID_ACCOUNT);
                    $logRow = $this->amazon_report_request_log_model->get_log_result($searchArrayLogRow);
                    if (!empty($logRow->requestid))
                        $ReportRequestId = $logRow->requestid;
                    if (empty($ReportRequestId)) {
                        try {
                            echo 'Getting Customer Sales data';
                            // Request the ORDER data report
                            $this->amazon_api_log_model->add_amazon_api_log($row->ID_ACCOUNT, 'getorderdata1');
                            $objAmazonReportRequest = new AmazonReportRequest($row->amazonstorename);
                            //echo "<pre />";
                            print_r($objAmazonReportRequest);
                            echo '<br>Previous Day Data.<br>';
                            $date= date('Y-m-d H:i:s');
                            $previousDate = date('Y-m-d', strtotime($date .' -4 day'));
                            $startDate = $previousDate." 00:00:01";
                            $objAmazonReportRequest->setTimeLimits($startDate,$date);
                            $objAmazonReportRequest->setReportType("_GET_FBA_FULFILLMENT_CUSTOMER_SHIPMENT_SALES_DATA_");
                            $objAmazonReportRequest->requestReport();
                            $response = $objAmazonReportRequest->getResponse();
                            $feedStatus = 0;
                            $fulldataload = 0;
                            if (!empty($response['ReportRequestId'])) {
                                $ReportRequestId = $response['ReportRequestId'];
                                $feedStatus = 1;
                                if ($response['ReportProcessingStatus'] == '_DONE_NO_DATA_' || $response['ReportProcessingStatus'] == '_CANCELLED_') {
                                    echo 'No Data!!!!!!';
                                    $feedStatus = 2;
                                }
                                if ($response['ReportProcessingStatus'] == '_DONE_NO_DATA_' || $response['ReportProcessingStatus'] == '_DONE_' && $row->loadedfirstorderfba = 0) {
                                    $fulldataload = 1;
                                    $feedStatus = 2;
                                }
                                print_r($response);
                                $t = time();
                                // Insert the report
                                $addReportRequestLogParams = array(
                                    'ID_ACCOUNT' => $row->ID_ACCOUNT,
                                    'logdate' => $t,
                                    'reporttype' => '_GET_FBA_FULFILLMENT_CUSTOMER_SHIPMENT_SALES_DATA_',
                                    'requestid' => $ReportRequestId,
                                    'status' => $feedStatus,
                                    'fulldataload' => $fulldataload
                                );
                                $this->amazon_report_request_log_model->add_amazon_report_request_log($addReportRequestLogParams);
                                if ($fulldataload == 1) {
                                    $this->feedback_setting_model->update_feedback_setting($row->ID_ACCOUNT, array(
                                        'loadfirstcustomersales' => '1',
                                        'hourlimit_customershipmentsale' => "hourlimit_customershipmentsale+1",
                                    ));
                                }
                            }
                        } catch (Exception $ex) {
                            $feedStatus = 0;
                            $content = date("d-m-Y H:i:s") . " " . "Customer Shipment Sales Cron Start". " :RequestReportList " . $ex->getMessage();
                            $this->logging->write_log($this->cronName, $content, 1, 0);
                        }
                    }

                    // Get
                    if ($feedStatus == 1 && !empty($ReportRequestId) && empty($GeneratedReportId)) {
                        // Get GeneratedReportId
                        try {
                            echo 'Getting generated report id';
                            $this->amazon_api_log_model->add_amazon_api_log($row->ID_ACCOUNT, 'getorderdata2');
                            $objAmazonReportRequestList = new AmazonReportRequestList($row->amazonstorename);
                            $objAmazonReportRequestList->setRequestIds($ReportRequestId);
                            $works = $objAmazonReportRequestList->fetchRequestList();
                            $response = $objAmazonReportRequestList->getList();
                            echo "<pre />";
                            print_r($response);
                            $feedStatus = 0;
                            if (!empty($response[0]['GeneratedReportId'])) {
                                $GeneratedReportId = $response[0]['GeneratedReportId'];
                                $feedStatus = 1;
                            }
                            if ($response[0]['ReportProcessingStatus'] == '_DONE_NO_DATA_' || $response[0]['ReportProcessingStatus'] == '_CANCELLED_') {
                                echo 'No Data!!!!!!';
                                $feedStatus = 2;
                                if (!empty($logRow->ID_LOG)) {
                                    $this->amazon_report_request_log_model->custom_where_update_amazon_report_request_log(array('ID_LOG =' => $logRow->ID_LOG), array(
                                        'status' => '2'
                                    ));
                                }
                            }
                            $this->feedback_setting_model->update_feedback_setting($row->ID_ACCOUNT, array(
                                'hourlimit_customershipmentsale' => "hourlimit_customershipmentsale + 1",
                            ));
                        } catch (Exception $ex) {
                            $feedStatus = 0;
                            $content = date("d-m-Y H:i:s") . " " . "Customer Shipment Sales Cron Start". " :RequestReportList " . $ex->getMessage();
                            $this->logging->write_log($this->cronName, $content, 1, 0);
                        }
                    }

                    // Last Step Get the Report
                    if ($feedStatus == 1 && !empty($GeneratedReportId)) {
//                sleep(2);
                        try {
                            echo 'Getting report';
                            $this->amazon_api_log_model->add_amazon_api_log($row->ID_ACCOUNT, 'getorderdata3');
                            $objAmazonReportRequestList = new AmazonReport($row->amazonstorename);
                            $objAmazonReportRequestList->setReportId($GeneratedReportId);
                            $objAmazonReportRequestList->fetchReport();
                            $data = $objAmazonReportRequestList->returnReport();
                            if (!empty($data)) {
                                $lineCount = 0;
                                $arrorderId=array();
                                $tmp = explode("\n", $data);
                                print_r($tmp);
                                foreach ($tmp as $line) {
                                    if ($lineCount > 0) {
                                        $saleschannel = '';
                                        $fieldData = explode("\t", $line);
                                        $shipmentdate = addslashes($fieldData[0]);
                                        $sku = addslashes($fieldData[1]); // new
                                        $fnsku = addslashes($fieldData[2]); // new
                                        $asin = addslashes($fieldData[3]); // new
                                        $fulfillmentcenterid = addslashes($fieldData[4]);
                                        $quantity = addslashes($fieldData[5]); // new
                                        $amazonorderid = addslashes($fieldData[6]);
                                        $currency = addslashes($fieldData[7]);
                                        $itemprice = addslashes($fieldData[8]);
                                        $shippingprice = addslashes($fieldData[9]);
                                        $giftwrapprice = addslashes($fieldData[10]); // new
                                        $shipcity = addslashes($fieldData[11]); // new
                                        $shipstate = addslashes($fieldData[12]); // new
                                        $shippostalcode = addslashes($fieldData[13]); // new
                                        if (empty($marketplaceidforSalesChannel))
                                            $marketplaceidforSalesChannel = $row->marketplace_id;
                                        $queryArray['ID_ACCOUNT'] = $row->ID_ACCOUNT;
                                        $queryArray['amazon-order-id'] = $amazonorderid;
                                        $queryArray['fnsku']= $fnsku;
                                        //$this->Refund_rescuer_model->updateCaseDetailbyOrderIdandAccountID($amazonorderid, $row->ID_ACCOUNT);
                                        $totalRow = $this->Customer_shipment_sales_model->custom_count_feedback_order($queryArray);
                                        if ($totalRow == 0 && !empty($amazonorderid)) {
                                            // Insert into database if it is unique
                                            $orderParam = array(
                                                'ID_ACCOUNT' => $row->ID_ACCOUNT,
                                                'shipment-date' => $shipmentdate,
                                                'sku' => $sku,
                                                'fnsku' => $fnsku,
                                                'asin' => $asin,
                                                'fulfillment-center-id' => $fulfillmentcenterid,
                                                'quantity' => $quantity,
                                                'amazon-order-id' => $amazonorderid,
                                                'currency' => $currency,
                                                'item-price-per-unit' => $itemprice,
                                                'shipping-price' => $shippingprice,
                                                'gift-wrap-price' => $giftwrapprice,
                                                'ship-city' => $shipcity,
                                                'ship-state' => $shipstate,
                                                'ship-postal-code' => $shippostalcode
                                            );
                                            echo "<pre/ >"; print_r($orderParam);
                                            $arrorderId[]=$this->Customer_shipment_sales_model->add_customer_shipement_sales($orderParam);
                                        }
                                    }
                                    $lineCount++;
                                }
                                if (!empty($arrorderId)) {
                                    $strCases = implode(",", $arrorderId);
                                    $content = "Order Id's Added :" . $strCases;
                                    $this->logging->write_log($this->cronName, $content, 2, $row->ID_ACCOUNT);
                                }
                            }
                            // Feedback settings date
                            $t = time();
                            $this->feedback_setting_model->update_feedback_setting($row->ID_ACCOUNT, array(
                                'api_customershipmentsaledate' => $t,
                                'hourlimit_customershipmentsale' => "5"
                            ));
                            // Update the request id
                            $this->amazon_report_request_log_model->custom_where_update_amazon_report_request_log(array('ID_ACCOUNT =' => $row->ID_ACCOUNT, 'requestid =' => $ReportRequestId), array(
                                'status' => '2'
                            ));
                        } catch (Exception $ex) {
                            $feedStatus = 0;
                            $content = date("d-m-Y H:i:s") . " " . "Customer Shipment Sales Cron Start". " :RequestReportList " . $ex->getMessage();
                            $this->logging->write_log($this->cronName, $content, 1, 0);
                        }
                    }
                }
                else{
                    echo "<br>Historical Data is Remaining to Fetch.<br>";
                }
            }
            else {
                $content = date("d-m-Y H:i:s") . " AmzDateIteration Data is not Available." . " Customer Shipment Sales Fetch Cron.";
                $this->logging->write_log($this->cronName, $content, 1, 0);
            }
        }
        $content = date("d-m-Y H:i:s") . " " . "Customer Shipment Sales Cron End.";
        $this->logging->write_log($this->cronName, $content, 3, 0);
    }

}
