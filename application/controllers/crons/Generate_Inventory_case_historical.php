<?php

/* Generated by Webdimensions  www.webdimensions.co.in */

class Generate_Inventory_case_historical extends CI_controller
{

    function __construct()
    {
        parent::__construct();
        if (!$this->input->is_cli_request()) {
            show_404();
        }
        $this->load->library('amazon');
        $this->load->model("user_model");
        $this->load->model("reimbursement_model");
        $this->load->model("Inventory_salvager_model_historical");
        $this->load->model("Case_log_model");
        $this->load->library('rat');
        $this->logging = new Rat();
    }

    public function index()
    {
        $cronName = "Generate Inventory Case Historical";
        // Logging in database.
        $content = date("d-m-Y H:i:s") . " " . "Generate Inventory Case Historical cron Start";
        $this->logging->write_log($cronName, $content, 1, 0);
        $allUsers = $this->user_model->getAllActiveUsers();
        foreach ($allUsers as $user)
        {
            $historicalRecordCheck = $this->user_model->gethistoricalrecordcheck($user['ID_ACCOUNT']);
            if ($historicalRecordCheck['setinventoryhistorical'] == 0)
            {
                $allRecordsFetched = $this->reimbursement_model->gethistorycronstatusbyaccountid( $user['ID_ACCOUNT'] );
                if ( ! empty( $allRecordsFetched ) )
                {
                    if ( $allRecordsFetched['InventoryStatus'] == 1 && $allRecordsFetched['ReimburseStatus'] == 1 )
                    {
                        $allInventoryDetailsSku = $this->Inventory_salvager_model_historical->getInventoryDetailsgroupbysku($user['ID_ACCOUNT']);
                        foreach ($allInventoryDetailsSku as $inventorydetails)
                        {
                            $reimbusementdetailbysku = $this->Inventory_salvager_model_historical->getReimbursementDetailsgroupbysku($user['ID_ACCOUNT'], $inventorydetails['sku']);
                            $allInventoryDetails = $this->Inventory_salvager_model_historical->getallInventoryDetails($user['ID_ACCOUNT'], $inventorydetails['sku']);
                            $allReimbursementDetails = $this->Inventory_salvager_model_historical->getallReimbursementDetails($user['ID_ACCOUNT'], $inventorydetails['sku']);
                            $resultCount = 0;
                            $reimbursementCount = ($reimbusementdetailbysku['TotalreimbursementQty'] ? $reimbusementdetailbysku['TotalreimbursementQty'] : 0);
                            if (isset($reimbursementCount)) {
                                $resultCount = $inventorydetails['TotalQty'] - $reimbursementCount;
                            }
                            if ($resultCount < 0) {
                                $this->generateinventorycase($allInventoryDetails, $allReimbursementDetails, $reimbursementCount, $resultCount);
                            } else {
                                $this->updateInventoryReimbursement($allInventoryDetails, $allReimbursementDetails, $resultCount);
                            }
                        }
                    }
                }
                $historicalRecordUpdate = $historicalRecordCheck['setinventoryhistorical'] + 1;
                $setHistoricalrecord = array('setinventoryhistorical' => $historicalRecordUpdate);
                $this->user_model->sethistoricalrecord($setHistoricalrecord, $user['ID_ACCOUNT']);
            }
        }
        $content = date("d-m-Y H:i:s") . " " . "Generate Inventory Case Historical cron End";
        $this->logging->write_log($cronName, $content, 3, 0);
    }

    function generateinventorycase($allInventoryDetails, $allreimbursementDetails, $reimbursementCount, $resultCount)
    {
        $arrCaseID = array();
        echo "GenerateInventorycase";
        $cronName = "Generate Inventory Case";
        $resultCount = abs($resultCount);
        foreach ($allInventoryDetails as $index => $inventoryData) {
            if ($index < $reimbursementCount) {
                $data = array('status' => '1');
                $this->Inventory_salvager_model_historical->updateInventoryDetailsData($data, $inventoryData['transaction_item_id'], $inventoryData['ID_ACCOUNT']);
                if (isset($allreimbursementDetails[$index]))
                    $this->Inventory_salvager_model_historical->updateReimburseDetailsById($allreimbursementDetails[$index]['id']);
            } else {
                $start_date = date( 'Y-m-d 0:0:0', strtotime( date( 'Y-m' ) . " -8 month" ) );
                $end_date   = date( 'Y-m-d 0:0:0', strtotime( "-1 day" ) );
                $caseDetail = array(
                    'accountId' => $inventoryData['ID_ACCOUNT'],
                    'inventoryItemId' => $inventoryData['transaction_item_id'],
                    'date' => date('Y-m-d H:i:s'),
                    'report_start_date' => $start_date,
                    'report_end_date' => $end_date

                );

                echo "<pre >"; print_r($caseDetail);
                if ($inventoryData['reason'] == 'H' || $inventoryData['reason'] == '6' || $inventoryData['reason'] == 'E' || $inventoryData['reason'] == 'K' || $inventoryData['reason'] == 'U')
                    $casetype = 'UDW';
                else if ($inventoryData['reason'] == '5' || $inventoryData['reason'] == 'D')
                    $casetype = 'ULW';
                $t = time();
                $this->Inventory_salvager_model_historical->insertCaseId($caseDetail);
                $log_data = array('ID_ACCOUNT' => $inventoryData['ID_ACCOUNT'], 'case_type' => $casetype, 'inventory_order_id' => $inventoryData['transaction_item_id'], 'timestamp' => $t);
                $arrCaseID[] = $this->Case_log_model->addcaselog($log_data);
                $data = array('status' => '1', 'case_type' => $casetype);
                $this->Inventory_salvager_model_historical->updateInventoryDetailsData($data, $inventoryData['transaction_item_id'], $inventoryData['ID_ACCOUNT']);
                if (isset($allreimbursementDetails[$index]))
                    $this->Inventory_salvager_model_historical->updateReimburseDetailsById($allreimbursementDetails[$index]['id']);
            }
        }
        if (!empty($arrCaseID)) {
            $strCases = implode(",", $arrCaseID);
            $content = "Generated Inventory Cases :" . $strCases;
            $this->logging->write_log($cronName, $content, 2, $inventoryData['ID_ACCOUNT']);
        }

    }

    function updateInventoryReimbursement($allInventoryDetails, $allreimbursementDetails, $inventoryCount)
    {
        echo "updateInventoryReimbursement";
        foreach ($allreimbursementDetails as $index => $reimbursementData) {
            $this->Inventory_salvager_model_historical->updateReimburseDetailsById($reimbursementData['id']);
            $data = array('status' => '1');
            $this->Inventory_salvager_model_historical->updateInventoryDetailsData($data, $allInventoryDetails[$index]['transaction_item_id'], $allInventoryDetails[$index]['ID_ACCOUNT']);
        }
    }

}
