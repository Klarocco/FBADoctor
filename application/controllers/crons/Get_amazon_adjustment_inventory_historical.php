<?php /* Generated by Webdimensions  www.webdimensions.co.in */

class Get_amazon_adjustment_inventory_historical extends CI_Controller
{

    function __construct()
    {
        parent::__construct();
        if (!$this->input->is_cli_request())
        {
            show_404();
        }
        $this->load->library('amazon');
        $this->load->model('feedback_fba_order_model');
        $this->load->model('feedback_setting_model');
        $this->load->model('amazon_report_request_log_model');
        $this->load->model('Customer_shipment_sales_model');
        $this->load->model('amazon_api_log_model');
        $this->load->model('Refund_rescuer_model');
        $this->load->library('rat');
        $this->logging = new Rat();
        $this->cronName = "Historical Amazon Inventory Adjustment Cron";
    }

    function index()
    {
        $content = date("d-m-Y H:i:s") . " " . "Historical Inventory Adjustment Cron Start";
        $this->logging->write_log($this->cronName, $content, 1, 0);
        $result = $this->feedback_setting_model->get_invetory_feedback_setting_historical();
        $this->getfbaorderfromamazon($result);
    }

    function getfbaorderfromamazon($result)
    {
        global $store, $AMAZON_SERVICE_URL;
        foreach ($result->result() as $row) {
            $amzdateiteration= $this->feedback_fba_order_model->getamzdateiterationdata('InventoryStatus',$row->ID_ACCOUNT);
            if($amzdateiteration['accountId']==$row->ID_ACCOUNT) {
                echo $amzdateiteration['accountId'];
                $feedStatus = 1;
            $ReportRequestId = "";
            $store = '';
            $GeneratedReportId = '';
            $store[$row->amazonstorename]['ID_ACCOUNT'] = $row->ID_ACCOUNT;
            $store[$row->amazonstorename]['merchantId'] = $row->mws_sellerid; //Merchant ID for this store
            $store[$row->amazonstorename]['marketplaceId'] = $row->marketplace_id; //Marketplace ID for this store
            $store[$row->amazonstorename]['keyId'] = $row->access_key; //Access Key ID
            $store[$row->amazonstorename]['secretKey'] = $row->secret_key; //Secret Access Key for this store
            $store[$row->amazonstorename]['MWSAuthToken'] = $row->mws_authtoken; //Secret Access Key for this store
            $AMAZON_SERVICE_URL = $row->host;
            $searchArrayLogRow = array('status !=' => 2, 'reporttype =' => '_GET_FBA_FULFILLMENT_INVENTORY_ADJUSTMENTS_DATA_', 'ID_ACCOUNT =' => $row->ID_ACCOUNT);
            $logRow = $this->amazon_report_request_log_model->get_log_result($searchArrayLogRow);
            if (!empty($logRow->requestid))
                $ReportRequestId = $logRow->requestid;
            if (empty($ReportRequestId)) {
                try {
                    echo 'Getting Amazon Adjustment Inventory';
                    // Request the ORDER data report
                    $this->amazon_api_log_model->add_amazon_api_log($row->ID_ACCOUNT, 'getorderdata1');
                    $objAmazonReportRequest = new AmazonReportRequest($row->amazonstorename);
                    echo "<pre />";
                    print_r($objAmazonReportRequest);
                    $objAmazonReportRequest->setTimeLimits($amzdateiteration['startDate'], $amzdateiteration['endDate']);
                    $objAmazonReportRequest->setReportType("_GET_FBA_FULFILLMENT_INVENTORY_ADJUSTMENTS_DATA_");
                    $objAmazonReportRequest->requestReport();
                    $response = $objAmazonReportRequest->getResponse();
                    $fulldataload = 0;
                    $feedStatus = 0;
                    if (!empty($response['ReportRequestId'])) {
                        $ReportRequestId = $response['ReportRequestId'];
                        $feedStatus = 1;
                        if ($response['ReportProcessingStatus'] == '_DONE_NO_DATA_' || $response['ReportProcessingStatus'] == '_CANCELLED_') {
                            echo 'No Data!!!!!!';
                            $feedStatus = 2;
                        }
                        if ($response['ReportProcessingStatus'] == '_DONE_NO_DATA_' || $response['ReportProcessingStatus'] == '_DONE_' && $row->loadedfirstorderfba = 0) {
                            $fulldataload = 1;
                            $feedStatus = 2;
                            $amzstatus = array('InventoryStatus' => '1');
                            $this->feedback_fba_order_model->updateamzdateiteration($amzstatus, $amzdateiteration['logId']);
                        }
                        print_r($response);
                        $t = time();

                        $addReportRequestLogParams = array(
                            'ID_ACCOUNT' => $row->ID_ACCOUNT,
                            'logdate' => $t,
                            'reporttype' => '_GET_FBA_FULFILLMENT_INVENTORY_ADJUSTMENTS_DATA_',
                            'requestid' => $ReportRequestId,
                            'status' => $feedStatus,
                            'fulldataload' => $fulldataload
                        );
                        $this->amazon_report_request_log_model->add_amazon_report_request_log($addReportRequestLogParams);
                        if ($fulldataload == 1) {
                            $this->feedback_setting_model->update_feedback_setting($row->ID_ACCOUNT, array(
                                'hourlimit_inventory' => "hourlimit_orderfba+1",
                            ));
                        }
                    }
                } catch (Exception $ex) {
                    $feedStatus = 0;
                    $content = date("d-m-Y H:i:s") . ":RequestReportList " . $ex->getMessage();
                    $myfile = file_put_contents($_SERVER['DOCUMENT_ROOT'] . "taskerrorlog.txt", $content . PHP_EOL, FILE_APPEND);
                }
            }

            // Get
            if ($feedStatus == 1 && !empty($ReportRequestId) && empty($GeneratedReportId)) {
//                sleep(60);
                // Get GeneratedReportId
                try {
                    echo 'Getting generated report id';
                    $this->amazon_api_log_model->add_amazon_api_log($row->ID_ACCOUNT, 'getorderdata2');
                    $objAmazonReportRequestList = new AmazonReportRequestList($row->amazonstorename);
                    $objAmazonReportRequestList->setRequestIds($ReportRequestId);
                    $works = $objAmazonReportRequestList->fetchRequestList();
                    $response = $objAmazonReportRequestList->getList();
                    echo "<pre />";
                    print_R($objAmazonReportRequestList);
                    print_R($response);
                    $feedStatus = 0;
                    if (!empty($response[0]['GeneratedReportId'])) {
                        $GeneratedReportId = $response[0]['GeneratedReportId'];
                        $feedStatus = 1;
                    }
                    if ($response[0]['ReportProcessingStatus'] == '_DONE_NO_DATA_' || $response[0]['ReportProcessingStatus'] == '_CANCELLED_') {
                        echo 'No Data!!!!!!';
                        $feedStatus = 2;
                        if (!empty($logRow->ID_LOG)) {
                            $this->amazon_report_request_log_model->custom_where_update_amazon_report_request_log(array('ID_LOG =' => $logRow->ID_LOG), array(
                                'status' => '2'
                            ));
                        }
                    }
                    if ($response[0]['ReportProcessingStatus'] == '_DONE_' || $response[0]['ReportProcessingStatus'] == '_DONE_NO_DATA_')
                    {
                        $date=date('Y-m-d', strtotime('-1 day', strtotime($amzdateiteration['startDate'])));
                        if ($date == date('Y-m-d',strtotime($response[0]['StartDate']))) {
                            $amzstatus = array('InventoryStatus' => '1');
                            $this->feedback_fba_order_model->updateamzdateiteration($amzstatus, $amzdateiteration['logId']);
                        }
                    }
                    $this->feedback_setting_model->update_feedback_setting($row->ID_ACCOUNT, array(
                        'hourlimit_inventory' => "hourlimit_inventory + 1",
                    ));
                } catch (Exception $ex) {
                    $feedStatus = 0;
                    $content = date("d-m-Y H:i:s") . ":RequestReportList " . $ex->getMessage();
                    $myfile = file_put_contents($_SERVER['DOCUMENT_ROOT'] . "taskerrorlog.txt", $content . PHP_EOL, FILE_APPEND);
                }
            }

            // Last Step Get the Report
            if ($feedStatus == 1 && !empty($GeneratedReportId)) {
//                sleep(2);
                try {
                    echo 'Getting report';
                    $this->amazon_api_log_model->add_amazon_api_log($row->ID_ACCOUNT, 'getorderdata3');
                    $objAmazonReportRequestList = new AmazonReport($row->amazonstorename);
                    $objAmazonReportRequestList->setReportId($GeneratedReportId);
                    $objAmazonReportRequestList->fetchReport();
                    $data = $objAmazonReportRequestList->returnReport();
                    /*$data = $objAmazonReportRequestList->getRawReport();*/
                    if (!empty($data)) {
                        $lineCount = 0;
                        $tmp = explode("\n", $data);
                        print_r($tmp);
                        $arrInventoryId = array();
                        foreach ($tmp as $line) {
                            if ($lineCount > 0) {
                                $saleschannel = '';
                                $fieldData = explode("\t", $line);
                                $date = strtotime(addslashes($fieldData[0]));
                                $adjustmentDate = date('Y-m-d H:i:s', mktime(date("h", $date), date("i", $date), date("s", $date), date("m", $date), date("d", $date), date("Y", $date)));
                                $transactionItemId = addslashes($fieldData[1]); // new
                                $fnsku = addslashes($fieldData[2]); // new
                                $sku = addslashes($fieldData[3]); // new
                                $productName = addslashes($fieldData[4]);
                                $fulfillmentCenterId = addslashes($fieldData[5]); // new
                                $qty = addslashes($fieldData[6]);
                                $reason = addslashes($fieldData[7]);
                                $disposition = addslashes($fieldData[8]);
                                if (!empty($saleschannel)) {
                                    $marketplaceidforSalesChannel = $this->common->GetMarketPlaceIDFromSalesChannel($saleschannel);
                                }
                                if (empty($marketplaceidforSalesChannel))
                                    $marketplaceidforSalesChannel = $row->marketplace_id;
                                $queryArray['ID_ACCOUNT'] = $row->ID_ACCOUNT;
                                $queryArray['transaction_item_id'] = $transactionItemId;
                                $totalRow = $this->Refund_rescuer_model->custom_count_adjustment_inventory($queryArray);
                                if ($totalRow == 0 && !empty($transactionItemId)) {
                                    // Insert into database if it is unique
                                    $orderParam = array(
                                        'ID_ACCOUNT' => $row->ID_ACCOUNT,
                                        'adjusted_date' => $adjustmentDate,
                                        'transaction_item_id' => $transactionItemId,
                                        'fnsku' => $fnsku,
                                        'sku' => $sku,
                                        'product_name' => $productName,
                                        'fulfillment_center_id' => $fulfillmentCenterId,
                                        'quantity' => $qty,
                                        'reason' => $reason,
                                        'disposition' => $disposition,
                                    );
                                    echo "<pre/ >";
                                    print_r($orderParam);
                                    $arrInventoryId[] = $this->Refund_rescuer_model->add_adjustment_inventory($orderParam);
                                }
                            }
                            $lineCount++;
                        }
                        if (!empty($arrInventoryId)) {
                            $strCases = implode(",", $arrInventoryId);
                            $content = "Inventory Id's Added :" . $strCases;
                            $this->logging->write_log($this->cronName, $content, 2, $row->ID_ACCOUNT);
                        }
                    }
                    // Feedback settings date
                    $t = time();
                    $this->feedback_setting_model->update_feedback_setting($row->ID_ACCOUNT, array(
                        'api_inventorydate' => $t,
                        'hourlimit_inventory' => "5"
                    ));
                    // Update the request id
                    $this->amazon_report_request_log_model->custom_where_update_amazon_report_request_log(array('ID_ACCOUNT =' => $row->ID_ACCOUNT, 'requestid =' => $ReportRequestId), array(
                        'status' => '2'
                    ));
                } catch (Exception $ex) {
                    $feedStatus = 0;
                    $content = date("d-m-Y H:i:s") . ":RequestReportList " . $ex->getMessage();
                    $myfile = file_put_contents($_SERVER['DOCUMENT_ROOT'] . "taskerrorlog.txt", $content . PHP_EOL, FILE_APPEND);
                }
            }
            }
            $data =array('InventoryStatus'=>'1');
            $this->Customer_shipment_sales_model->historycronstatusupdate_data($data,$row->ID_ACCOUNT);
        }
        // Logging in database.
        $content = date("d-m-Y H:i:s") . " " . "Historical Inventory Adjustment Cron End.";
        $this->logging->write_log($this->cronName, $content, 3, 0);
    }
}
