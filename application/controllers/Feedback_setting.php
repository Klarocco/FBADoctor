<?php

/*
 * Generated by Webdimensions
 * www.webdimensions.co.in
 */

class Feedback_setting extends CI_Controller
{

    private $accountid;

    function __construct()
    {
        parent::__construct();
        if (!$this->user->loggedin)
            redirect(site_url("login"));
        $this->load->library('amazon');
        $this->load->library('encrypt');
        $this->load->helper(array('form', 'url'));
        $this->load->model('Feedback_setting_model');
        $this->load->model('account_model');
        $this->load->model('admin_model');
        $this->load->model('subscription_model');
        $this->load->model('user_model');
        $this->load->library('Xmlapi');
        $this->accountid = $this->user->info->ID_ACCOUNT;
        $this->template->loadExternal(
            '<script type="text/javascript" src="'
            . base_url() . 'scripts/custom/formvalidation.js" /></script>'
        );

    }

    /*
     * Listing of feedback_settings
     */

    function index()
    {
        $this->template->loadData("activeLink", array("settings" => array("feedback_setting" => 1)));
        $data['feedback_settings'] = $this->Feedback_setting_model->get_feedback_setting($this->accountid);
        $marketplace_id = $this->admin_model->get_all_marketplace_id();
        $this->template->loadContent("feedback_setting/index", array(
            'feedback_settings' => $data['feedback_settings'],
            'marketplace_id' => $marketplace_id,
        ));
    }

    /*
     * listing of feedback setup
     */

    public function setup($set = 0)
    {
        //error_reporting(0);
        $this->template->loadData("activeLink", array("settings" => array("feedback_setting" => 1)));
        $marketplace_id = $this->admin_model->get_all_marketplace_id();
        $data = $this->Feedback_setting_model->get_feedback_setting($this->accountid);
        $paymentinfo = $this->subscription_model->get_payment_info_by_accountid($this->accountid);
        $data['link_amazon_account'] = $this->Feedback_setting_model->get_feedback_setting($this->accountid);

        if (!$this->user->info->admin) {

            if ($set == 0) {
                if (!isset($data['feedbackfromemailaddress']) || empty($data['feedbackfromemailaddress'])) {
                    $this->template->loadContent("feedback_setting/setup", array(
                        'feedback_settings' => $data,
                        'marketplace_id' => $marketplace_id,
                    ));
                } else if (empty($data['mws_sellerid']) || empty($data['mws_marketplaceid']) || empty($data['mws_authtoken'])) {
                    $marketplace_id = $this->admin_model->get_marketplace_account_by_id($data['mws_marketplaceid']);
                    $this->template->loadContent("feedback_setting/amazon_connect_info", array(
                        'mws_marketplaceid' => $marketplace_id['marketplace_id'],
                    ));
                } else if (empty($paymentinfo['ID_PAYMENT']) || empty($paymentinfo['customerid'])) {

                    $user_detail = $this->user_model->get_user_by_Account_id($this->accountid);
                    $param = array('user_detail' => $user_detail, 'billRow' => $paymentinfo);
                    $this->template->loadContent('feedback_setting/confirm_registration', $param);
                } else {

                    redirect(site_url("home"));
                }
            } else {

                $this->template->loadContent("feedback_setting/setup", array(
                    'feedback_settings' => $data,
                    'marketplace_id' => $marketplace_id,
                ));
            }
        } else {
            redirect(site_url("home"));
        }
    }

    /*
     * listing of feedback_alert_setting
     */

    function feedback_alert()
    {
        $this->template->loadData("activeLink", array("settings" => array("feedback_alert" => 1)));
        $data['feedback_settings'] = $this->Feedback_setting_model->get_feedback_setting($this->accountid);
        $this->template->loadContent("feedback_setting/feedback_alert", array(
            'feedback_settings' => $data['feedback_settings']));
    }

    /*
     * listing of link_amazon_account
     */

    function link_amazon_account($set = 0)
    {

        $this->template->loadData("activeLink", array("settings" => array("link_amazon_account" => 1)));
        $data['link_amazon_account'] = $this->Feedback_setting_model->get_feedback_setting($this->accountid);

        if (empty($data['link_amazon_account']['link_amazon_email']) && empty($data['link_amazon_account']['link_amazon_password'])) {
            $email_user = $this->createlinkamazonemail($data['link_amazon_account']['username']);
            $email_pass = XMLAPI_EMAIL_PASS;

            $data['link_amazon_account']['link_amazon_email'] = $email_user;
            $data['link_amazon_account']['link_amazon_password'] = $email_pass;
            $param = array(
                'link_amazon_email' => $data['link_amazon_account']['link_amazon_email'],
                'link_amazon_password' => $data['link_amazon_account']['link_amazon_password'],
            );
            $this->Feedback_setting_model->update_feedback_setting($this->accountid, $param);
        }
        $this->template->loadContent("feedback_setting/link_amazon_account_view", array(
            'feedback_settings' => $data['link_amazon_account'], 'set' => $set));
    }

    public function createlinkamazonemail($email_user)
    {
        $ip = XMLAPI_HOST;            // should be server IP address or 127.0.0.1 if local server
        $account = XMLAPI_USERNAME;        // cpanel user account name
        $passwd = XMLAPI_PASS;          // cpanel user password
        $port = XMLAPI_PORT;                  // cpanel secure authentication port unsecure port# 2082
        $email_domain = XMLAPI_DOMAIN;
        $new_username = $email_user . '@' . $email_domain;
        if (!$this->Feedback_setting_model->check_linkamazonemail_is_free($new_username)) {
            $true = $this->check_linkamazonemail($email_user, $email_domain);
            $new_username = explode('@', $true);
            $email_user = $new_username[0];
        }
        $xmlapi = new Xmlapi($ip);
        $xmlapi->set_port($port);     //set port number.
        $xmlapi->password_auth($account, $passwd);
        $xmlapi->set_debug(1);        //output to error file  set to 1 to see error_log.
        $call = array('domain' => $email_domain, 'email' => $email_user, 'fwdopt' => "fwd", 'fwdemail' => XMLAPI_DEST_NAME);
        $result = $xmlapi->api2_query($account, "Email", "addforward", $call);
        return $email_user . '@' . $email_domain;
    }

    public function check_linkamazonemail($email_user, $domain)
    {
        $new_username = $email_user . random_int(1, 100) . '@' . $domain;
        if (!$this->Feedback_setting_model->check_linkamazonemail_is_free($new_username))
            $this->check_linkamzonemail($email_user, $domain);
        else
            return $new_username;
    }

    /*
     * listing of email_setting
     */

    function email_setting()
    {
        $this->template->loadData("activeLink", array("settings" => array("email_setting" => 1)));
        $data['feedback_settings'] = $this->Feedback_setting_model->get_feedback_setting($this->accountid);
        $this->template->loadContent("feedback_setting/email_setting", array(
            'feedback_settings' => $data['feedback_settings']));
    }

    /*
     *  update feedback setting
     */

    function update_feedback_setting()
    {
        global $store, $AMAZON_SERVICE_URL;
        if (isset($_POST) && count($_POST) > 0) {
            if (!$this->Feedback_setting_model->checkmswsellerid($this->input->post('mws_sellerid'), $this->accountid)) {
                $this->session->set_flashdata("errormsg", "Seller Id All Ready Use. !");
                redirect('feedback_setting/index');
            }
            else
            {
                $marketplace = $this->admin_model->get_marketplace_account_by_id($this->input->post('mws_marketplaceid'));
                $developerAccount = $this->admin_model->get_developer_account_by_id($this->input->post('mws_marketplaceid'));
                $store[$this->input->post('amazonstorename')]['ID_ACCOUNT'] = $this->accountid;
                $store[$this->input->post('amazonstorename')]['merchantId'] = $this->input->post('mws_sellerid'); //Merchant ID for this store
                $store[$this->input->post('amazonstorename')]['marketplaceId'] = $marketplace['marketplace_id']; //Marketplace ID for this store
                $store[$this->input->post('amazonstorename')]['keyId'] = $developerAccount['access_key']; //Access Key ID
                $store[$this->input->post('amazonstorename')]['secretKey'] = $developerAccount['secret_key']; //Secret Access Key for this store
                $store[$this->input->post('amazonstorename')]['MWSAuthToken'] = $this->input->post('mws_authtoken'); //MWS Auth Token for this store
                $AMAZON_SERVICE_URL = $marketplace['host'];
                $objAmazonReportRequest = new AmazonReportRequest($this->input->post('amazonstorename'));
                $objAmazonReportRequest->setTimeLimits('- 24 hours');
                $objAmazonReportRequest->setReportType("_GET_FLAT_FILE_ORDERS_DATA_");
                $objAmazonReportRequest->requestReport();
                $response = $objAmazonReportRequest->getResponse();
                if (empty($response['ReportRequestId'])) {
                    $fail = lang("error_86");
                }

                if (!empty($fail))
                    $this->template->error($fail);
                $mwssettingsdone = 0;
                $mws_sellerid = $this->input->post('mws_sellerid');

                $mws_marketplaceid = $this->input->post('mws_marketplaceid');
                $mws_authtoken = $this->input->post('mws_authtoken');

                if (!empty($month) && !empty($day) && !empty($year))
                    $set_feedsendstartdate = mktime(0, 0, 0, $month, $day, $year);
                if (!empty($mws_sellerid) && !empty($mws_marketplaceid))
                    $mwssettingsdone = 1;
                $params = array(
                    'mws_sellerid' => $mws_sellerid,
                    'mws_marketplaceid' => $mws_marketplaceid,
                    'mws_authtoken' => $mws_authtoken,
                    'importorderdays' => import_days,
                );
                $acc_params = array(
                    'company' => $this->input->post('amazonstorename'),
                    'mwssettingsdone' => $mwssettingsdone
                );

                $this->Feedback_setting_model->update_feedback_setting($this->accountid, $params);
                $this->account_model->update_account($this->accountid, $acc_params);
                $this->session->set_flashdata("globalmsg", lang("success_42"));
                redirect('feedback_setting/index');
            }
        }
    }

    public function add_basic_settings()
    {
        //error_reporting(0);
        if (isset($_POST) && count($_POST) > 0) {
            $set_feedsendstartdate = 0;
            $feedbackfromemailaddress = $this->input->post('feedbackfromemailaddress');
            $mws_marketplaceid = $this->input->post('mws_marketplaceid');
            $amazonstorename = $this->input->post('amazonstorename');
            if (!empty($_REQUEST['set_feedsendstartdate'])) {
                $date = $_REQUEST['set_feedsendstartdate'];
                $feedsendstartdate = explode('/', $date);
                $month = $feedsendstartdate[0];
                $day = $feedsendstartdate[1];
                $year = $feedsendstartdate[2];
                if (!empty($month) && !empty($day) && !empty($year))
                    $set_feedsendstartdate = mktime(0, 0, 0, $month, $day, $year);
            }
            $params = array(
                'amazonstorename' => $amazonstorename,
                'feedbackfromemailaddress' => $feedbackfromemailaddress,
                'mws_marketplaceid' => $mws_marketplaceid,
                'set_feedsendstartdate' => $set_feedsendstartdate,
                'importorderdays' => import_days,
                'apiactive' => 1
            );
            $acc_params = array(
                'company' => $this->input->post('amazonstorename'),
            );
            $this->Feedback_setting_model->update_feedback_setting($this->accountid, $params);
            $this->account_model->update_account($this->accountid, $acc_params);
            $data = $this->Feedback_setting_model->get_feedback_setting($this->accountid);
            $marketplace_id = $this->admin_model->get_marketplace_account_by_id($data['mws_marketplaceid']);
            $param = array();
            if (isset($data['mws_sellerid']) || isset($data['mws_authtoken'])) {
                $param = array(
                    'mws_sellerid' => $data['mws_sellerid'],
                    'mws_marketplaceid' => $marketplace_id['marketplace_id'],
                    'mws_authtoken' => $data['mws_authtoken'],
                );
            } else {
                $param = array(
                    'mws_marketplaceid' => $marketplace_id['marketplace_id'],
                );
            }
            $this->template->loadContent('feedback_setting/amazon_connect_info', $param);
        }
    }

    /* add amazon infromation */

    public function add_amazon_info()
    {
        //error_reporting(0);
        if (!empty($_POST)) {

            global $store, $AMAZON_SERVICE_URL;
            $data = $this->Feedback_setting_model->get_feedback_setting($this->accountid);
            $marketplace = $this->admin_model->get_marketplace_account_by_id($data['mws_marketplaceid']);
            $developerAccount = $this->admin_model->get_developer_account_by_id($data['mws_marketplaceid']);
            $store[$this->input->post('amazonstorename')]['ID_ACCOUNT'] = $this->accountid;
            $store[$this->input->post('amazonstorename')]['merchantId'] = $this->input->post('mws_sellerid'); //Merchant ID for this store
            $store[$this->input->post('amazonstorename')]['marketplaceId'] = $marketplace['marketplace_id'];
            //Marketplace ID for this store
            $store[$this->input->post('amazonstorename')]['keyId'] = $developerAccount['access_key']; //Access Key ID
            $store[$this->input->post('amazonstorename')]['secretKey'] = $developerAccount['secret_key']; //Secret Access Key for this store
            $store[$this->input->post('amazonstorename')]['MWSAuthToken'] = $this->input->post('mws_authtoken'); //MWS Auth Token for this store

            $AMAZON_SERVICE_URL = $marketplace['host'];
            $objAmazonReportRequest = new AmazonReportRequest($this->input->post('amazonstorename'));
            $objAmazonReportRequest->setTimeLimits('- 24 hours');
            $objAmazonReportRequest->setReportType("_GET_FLAT_FILE_ORDERS_DATA_");
            $objAmazonReportRequest->requestReport();
            $response = $objAmazonReportRequest->getResponse();
            if (isset($_POST) && count($_POST) > 0 && $response['ReportRequestId'] != '') {
                $result = $this->user_model->checkAmzDateIterationIsExistsByAccount($this->accountid);
                if(empty($result)){
                    $this->addDate($this->accountid);
                }
                $mws_sellerid = $this->input->post('mws_sellerid');
                $mws_marketplaceid = $this->input->post('marketplaceid');
                $mws_authtoken = $this->input->post('mws_authtoken');

                $mws_sellerid = $this->input->post('mws_sellerid');

                if (!$this->Feedback_setting_model->checkmswsellerid($mws_sellerid, $this->accountid))
                {
                    $this->session->set_flashdata("errormsg", "Seller Id All Ready Use. !");
                    redirect('feedback_setting/add_amazon_info');
                }
                else
                {
                    $params = array(
                        'mws_sellerid' => $mws_sellerid,
                        //'mws_marketplaceid' => $mws_marketplaceid,
                        'mws_authtoken' => $mws_authtoken,
                    );
                    $this->Feedback_setting_model->update_feedback_setting($this->accountid, $params);
                }
                redirect('feedback_setting/add_paymentinfo_view');
            } else if ($response['ReportRequestId'] == '' && isset($_POST)) {
                $data = $this->Feedback_setting_model->get_feedback_setting($this->accountid);
                $marketplace_id = $this->admin_model->get_marketplace_account_by_id($data['mws_marketplaceid']);
                $this->session->set_flashdata("errormsg", lang("error_86"));
                $this->template->loadContent('feedback_setting/amazon_connect_info', array(
                    'mws_sellerid' => $data['mws_sellerid'],
                    'mws_marketplaceid' => $marketplace_id['marketplace_id'],
                    'mws_authtoken' => $data['mws_authtoken'],
                ));
            }
        } else {
            $data = $this->Feedback_setting_model->get_feedback_setting($this->accountid);
            $marketplace_id = $this->admin_model->get_marketplace_account_by_id($data['mws_marketplaceid']);
            $this->template->loadContent('feedback_setting/amazon_connect_info', array(
                'mws_sellerid' => $data['mws_sellerid'],
                'mws_marketplaceid' => $marketplace_id['marketplace_id'],
                'mws_authtoken' => $data['mws_authtoken'],
            ));
        }
    }

    public function addDate($acountId)
    {
        $start_date = date('m/d/Y', strtotime(date('Y-m') . " -17 month"));
        $end_date = date('m/d/Y', strtotime("-1 day"));
        $data = $this->rent_range($start_date, $end_date);
        $totCount = count($data['start_dates']);
        for ($count = 0; $count < $totCount; $count++) {
            $stamp = strtotime($data['start_dates'][$count] . ' 00:00:00');
            $startDate = date("Y-m-d H:i:s", $stamp);
            $stamp = strtotime($data['end_dates'][$count] . ' 23:59:59');
            $endDate = date("Y-m-d H:i:s", $stamp);
            $amzDateIteration[$count] = array(
                'logId' => '',
                'accountId' => $acountId,
                'startDate' => $startDate,
                'endDate' => $endDate,
                'createdAt' => date('Y-m-d H:i:s'),
                'OrderStatus' => '0',
                'InventoryStatus' => '0',
                'ReimburseStatus' => '0',
                'ReturnStatus' => '0');
            $this->user_model->addAmzDateIteration($amzDateIteration[$count]);
        }
    }

//Set Date Range
    public
    function rent_range($start_date, $end_date)
    {
        $start_date = date("m/d/Y", strtotime($start_date));
        $end_date = date("m/d/Y", strtotime($end_date));
        $start = strtotime($start_date);
        $end = strtotime($end_date);

        $month = $start;
        $months[] = date('Y-m', $start);
        while ($month < $end) {
            $month = strtotime("+1 month", $month);
            $months[] = date('Y-m', $month);
        }

        foreach ($months as $mon) {
            $mon_arr = explode("-", $mon);
            $y = $mon_arr[0];
            $m = $mon_arr[1];
            $start_dates_arr[] = date("m/d/Y", strtotime($m . '/01/' . $y . ' 00:00:00'));
            $end_dates_arr[] = date("m/d/Y", strtotime('-1 minute', strtotime('+1 month', strtotime($m . '/01/' . $y . ' 00:00:00'))));
        }

        //to remove first month in start date and add our start date as first date
        array_shift($start_dates_arr);
        array_pop($start_dates_arr);
        array_unshift($start_dates_arr, $start_date);

        //To remove last month in end date and add our end date as last date
        array_pop($end_dates_arr);
        array_pop($end_dates_arr);
        array_push($end_dates_arr, $end_date);

        $result['start_dates'] = $start_dates_arr;
        $result['end_dates'] = $end_dates_arr;
        return $result;
    }

    /*
     * add_payment_info_view
     */
    public
    function add_paymentinfo_view()
    {
        $user_detail = $this->user_model->get_user_by_Account_id($this->accountid);
        $billRow = $this->subscription_model->get_payment_info_by_accountid($this->accountid);
        $param = array('user_detail' => $user_detail, 'billRow' => $billRow);
        $this->template->loadContent('feedback_setting/confirm_registration.php', $param);
    }

    /* test amazon connection credintial */
    public function test_amazon_amazonconnection()
    {
        $mws_sellerid = $this->input->post('mws_sellerid');
        if (!$this->Feedback_setting_model->checkmswsellerid($mws_sellerid, $this->accountid))
        {
            echo json_encode("MWS Seller ID already Exist!.");
        }
        else
        {
            global $store, $AMAZON_SERVICE_URL;
            $data = $this->Feedback_setting_model->get_feedback_setting($this->accountid);
            $marketplace = $this->admin_model->get_marketplace_account_by_id($data['mws_marketplaceid']);
            $developerAccount = $this->admin_model->get_developer_account_by_id($data['mws_marketplaceid']);
            $store[$this->input->post('amazonstorename')]['ID_ACCOUNT'] = $this->accountid;
            $store[$this->input->post('amazonstorename')]['merchantId'] = $this->input->post('mws_sellerid'); //Merchant ID for this store
            $store[$this->input->post('amazonstorename')]['marketplaceId'] = $marketplace['marketplace_id'];
            //Marketplace ID for this store
            $store[$this->input->post('amazonstorename')]['keyId'] = $developerAccount['access_key']; //Access Key ID
            $store[$this->input->post('amazonstorename')]['secretKey'] = $developerAccount['secret_key']; //Secret Access Key for this store
            $store[$this->input->post('amazonstorename')]['MWSAuthToken'] = $this->input->post('mws_authtoken'); //MWS Auth Token for this store
            $AMAZON_SERVICE_URL = $marketplace['host'];
            $objAmazonReportRequest = new AmazonReportRequest($this->input->post('amazonstorename'));
            $objAmazonReportRequest->setTimeLimits('- 24 hours');
            $objAmazonReportRequest->setReportType("_GET_FLAT_FILE_ORDERS_DATA_");
            $objAmazonReportRequest->requestReport();
            $response = $objAmazonReportRequest->getResponse();
            if (empty($response['ReportRequestId']))
            {
                echo json_encode("Amazon credential is incorrect!.");
            }
            else
            {
                echo json_encode(1);
            }
        }
    }

    /*
     *  update alert_setting
     */
    public
    function update_alert_setting()
    {

        $set_negative_fb_emailalerts = isset($_REQUEST['set_negative_fb_emailalerts']) ? 1 : 0;
        $set_netural_fb_emailalerts = isset($_REQUEST['set_netural_fb_emailalerts']) ? 1 : 0;
        $set_notification_fbalerts_email = $_REQUEST['set_notification_fbalerts_email'];
        $param = array(
            'set_negative_fb_emailalerts' => $set_negative_fb_emailalerts,
            'set_netural_fb_emailalerts' => $set_netural_fb_emailalerts,
            'set_negativenetural_sendtype' => 2,
            'set_notification_fbalerts_email' => $set_notification_fbalerts_email
        );
        $this->Feedback_setting_model->update_feedback_setting($this->accountid, $param);
        $this->session->set_flashdata("globalmsg", lang("success_43"));
        redirect('feedback_setting/feedback_alert');
    }

    /*
     *  update alert_setting
     */
    public
    function update_amazon_link_account()
    {
        if ($_REQUEST['amazon_link_account_email'] == '' && $_REQUEST['amazon_link_account_password'] == '') {
            $this->session->set_flashdata("errormsg", 'Both the fields are mandatory');
            redirect('feedback_setting/link_amazon_account');
        } else {
            $param = array(
                'link_amazon_email' => $_REQUEST['amazon_link_account_email'],
                'link_amazon_password' => $_REQUEST['amazon_link_account_password'],
            );
            $this->Feedback_setting_model->update_feedback_setting($this->accountid, $param);
            $this->session->set_flashdata("globalmsg", lang("success_42_1"));
                redirect('feedback_setting/link_amazon_account');
        }
    }

    /*
     * update emailsetting
     */
    public
    function update_emailsetting()
    {
        $set_sendemails_fbaorders = isset($_REQUEST['set_sendemails_fbaorders']) ? 1 : 0;
        $set_sendemails_fbafeedbackdays = (int)$_REQUEST['set_sendemails_fbafeedbackdays'];
        $set_sendemails_time = $_REQUEST['set_sendemails_time'];
        $set_secondfollowupemail = isset($_REQUEST['set_secondfollowupemail']) ? 1 : 0;
        $set_secondfollowupemail_days = (int)$_REQUEST['set_secondfollowupemail_days'];
        $set_thirdfollowupemail = isset($_REQUEST['set_thirdfollowupemail']) ? 1 : 0;
        $set_thirdfollowupemail_days = (int)$_REQUEST['set_thirdfollowupemail_days'];
        $set_fourthfollowupemail = isset($_REQUEST['set_fourthfollowupemail']) ? 1 : 0;
        $set_fourthfollowupemail_days = (int)$_REQUEST['set_fourthfollowupemail_days'];
        if ($set_sendemails_fbafeedbackdays < 5) {
            $set_sendemails_fbafeedbackdays = 5;
        }
        if ($set_sendemails_fbafeedbackdays > 45)
            $set_sendemails_fbafeedbackdays = 45;

        if ($set_secondfollowupemail_days < 3)
            $set_secondfollowupemail_days = 3;
        if ($set_secondfollowupemail_days > 45)
            $set_secondfollowupemail_days = 45;

        if ($set_thirdfollowupemail_days < 2)
            $set_thirdfollowupemail_days = 2;
        if ($set_thirdfollowupemail_days > 45)
            $set_thirdfollowupemail_days = 45;

        if ($set_fourthfollowupemail_days < 2)
            $set_fourthfollowupemail_days = 2;
        if ($set_fourthfollowupemail_days > 45)
            $set_fourthfollowupemail_days = 45;

        $params = array(
            'set_sendemails_fbaorders' => $set_sendemails_fbaorders,
            'set_sendemails_fbafeedbackdays' => $set_sendemails_fbafeedbackdays,
            'set_sendemails_time' => $set_sendemails_time,
            'set_secondfollowupemail' => $set_secondfollowupemail,
            'set_secondfollowupemail_days' => $set_secondfollowupemail_days,
            'set_thirdfollowupemail' => $set_thirdfollowupemail,
            'set_thirdfollowupemail_days' => $set_thirdfollowupemail_days,
            'set_fourthfollowupemail' => $set_fourthfollowupemail,
            'set_fourthfollowupemail_days' => $set_fourthfollowupemail_days
        );
        $this->Feedback_setting_model->update_feedback_setting($this->accountid, $params);
        $this->session->set_flashdata("globalmsg", lang("success_44"));
        redirect('feedback_setting/email_setting');
    }

    public function display_instruction()
    {
        $this->template->loadContent('feedback_setting/amazon_instructions');
    }

}
