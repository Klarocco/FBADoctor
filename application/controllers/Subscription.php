<?php
/*
 * Generated by Webdimensions
 * www.webdimensions.co.in
 */
class Subscription extends CI_Controller {

    public function __construct() {
        parent::__construct();
			if (!$this->user->loggedin) {
			redirect(site_url('login?flag=y'));
        }
		$currenttime = time();
        $this->load->library('encrypt');
        $this->load->model("subscription_model");
        $this->load->model("Feedback_setting_model");
        $this->load->model("Account_model");
        $this->load->model("user_model");
		$this->accountid = $this->user->info->ID_ACCOUNT;
        $this->load->library('session');
        $this->template->loadData("activeLink", array("settings" => array("plan" => 1)));
        $this->template->loadExternal(
                '<script type="text/javascript" src="'
                . base_url() . 'scripts/custom/formvalidation.js" /></script>'
        );
        $this->common->stripe_setting();
    }

    public function index()
    {
        $this->Update_creditcard_view();

    }

    /*
     * create customer
     */

    public function customer_create() {
        $user= $this->user_model->get_user_by_Account_id($this->accountid);
        $accountinfo = $this->Account_model->get_account($this->accountid);
        $billRow = $this->subscription_model->get_payment_info_by_accountid($this->accountid);
       try {
           $customer = \Stripe\Customer::create(array(
               "description" => $billRow['bill_email'],
               "source" => $billRow['payment_token']
           ));
       }
       catch (Exception $e)
       {
           $this->session->set_flashdata("errormsg", 'Card Details are invalid');
           redirect(site_url("feedback_setting/add_paymentinfo_view"));
        }

       if (!empty($customer)) {
            $customerid = $customer->id;
            $param = array('customerid' => $customerid);
            $this->subscription_model->update_payment_method_info($this->accountid, $param);
            $prama = array('mwssettingsdone' => 1);
            $this->Account_model->update_account($this->accountid, $prama);
       }

        $title= "Welcome Email";

        $message ='<!DOCTYPE HTML>
                    <html>
                        <head>
                            <style type="text/css">
                            .header
                            {
                                color: #535353;
                                text-align: center;
                                margin-bottom:0px; 
                            }
                            .paragraph
                            {
                                color:#535353; 
                                margin:20px;
                                text-align:left;
                            }
                            a, a:hover
                            {
                                text-decoration:underline;
                            }
                            </style>
                            <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
                            <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no"/>
                            <title>FBADoctor</title>
                        </head>
                        <body bgcolor="#CCCCCC">
                            <table width="600" border="0" bgcolor="#FFFFFF" cellspacing="0" cellpadding="0" align="center" style="font-family:Arial, Helvetica, sans-serif;">
                                <tr>
                                    <td align="center"><br>
                                        <h3>FBADoctor</h3><br><br>
                                    </td>
                                 </tr>
                                
                                <tr>
                                    <td>
                                    <h2 class="header">Welcome to FBADoctor</h2>
                                        <p class="paragraph">Dear, '.$user['first_name'].' '.$user['last_name'].'</p>
                                        <p class="paragraph">Thank you for joining FBADoctor.</p>
                                        <p class="paragraph">- The FBADoctor Team</p>
                                    </td>
                                </tr>
                               <tr>
                                <td align="center"><p style="font-size:12px; color:#999; line-height:20px;"><a style="color:#999;" href="support@FBADoctor.com">support@FBADoctor.com</a> | <a style="color:#999;" href="http://FBADoctor.com">www.FBADoctor.com</a> <br>
                                    Copyright 2017 FBADoctor - All Rights Reserved.</p>
                                </td>
                              </tr>
                            </table>
                        </body>
                    </html>';
        $result = $this->common->send_email($title, $message, $this->user->info->email);
        redirect(site_url('home'));
    }


    /*
     * listing of update creditcarview file
     */

        public function Update_creditcard_view() {
        $billRow = $this->subscription_model->get_payment_info_by_accountid($this->accountid);
        $this->template->loadContent("user_settings/update_credit_card_view.php", array('billRow' => $billRow));
    }

    /*
     * update existing creditcard
     */

    public function update_creditcard($accountid) 
    {
        $billRow = $this->subscription_model->get_payment_info_by_accountid($this->accountid);
        $cardNumber = $this->encrypt->decode($billRow['cardnumber']);
  
		if($_POST['Credit_Card_Number1'] == $_POST['Credit_Card_Number2'])
		{	
			if($cardNumber == $_POST['Credit_Card_Number2'])
			{
				$this->session->set_flashdata("errormsg", 'Card is Already in Used, Please Update with new Card Details');
				redirect(site_url("Subscription/index"));
			}
		}	
        else
        {
            try 
            {
                $token = $_POST['stripeToken'];
                $billRow = $this->subscription_model->get_payment_info_by_accountid($this->accountid);
			    $customer = \Stripe\Customer::retrieve($billRow['customerid']);
                $cardid = $customer->default_source;

                if (empty($cardid)) {
                    $customer->sources->create(array("source" => $token));
                } else {
                    $customer->sources->retrieve($cardid)->delete();
                    $customer->sources->create(array("source" => $token));
                }
                $orginalFirstname   = $_POST['cardholdername'];
                $orginalCardNumber  = $_POST['Credit_Card_Number2'];
                $orginalExpireMonth = $_POST['expiremonth'];
                $orignalExpireYear  = $_POST['expireyear'];
                $orignalPayment = '';
                $Payment = '';
                $cardsecuritycode = $_POST['cardsecuritycode'];
                $firstname = $this->encrypt->encode($orginalFirstname);
                $Payment = $this->encrypt->encode($Payment);
                $Credit_Card_Number = $this->encrypt->encode($orginalCardNumber);
                $expiremonth = $this->encrypt->encode($orginalExpireMonth);
                $expireyear = $this->encrypt->encode($orignalExpireYear);
                $cardsecuritycode = $this->encrypt->encode($cardsecuritycode);

                $params = array(
                    'bill_firstname' => $firstname,
                    'cardtype' => $Payment,
                    'cardnumber' => $Credit_Card_Number,
                    'cardexpiremonth' => $expiremonth,
                    'cardexpireyear' => $expireyear,
                    'cardsecuritycode' => $cardsecuritycode,
                    'payment_token' => $token
                );
                //$params = array("payment_token" => $token);
                $this->subscription_model->update_payment_method_info($this->accountid, $params);
                $this->session->set_flashdata("globalmsg", lang("success_66"));
               redirect(site_url("Subscription/index"));
                throw new Exception($customer);
            } 
            catch (Exception $e) 
            {
                if (!empty($e)) 
                {
                    $body = $e->getJsonBody();
                    $err = $body['error'];
                    $this->session->set_flashdata("errormsg", $err['message']);
                    redirect(site_url("Subscription/index"));
                }
            }
        }

    }

    /* add payment method info */

    public function add_paymentinfo() {

        if (isset($_POST)) {
            $datecreated = time();
            $email = $_POST['email'];
            $orginalFirstname = $_POST['cardholdername'];
            $orginalCardNumber = $_POST['Credit_Card_Number'];
            $orginalExpireMonth = $_POST['expiremonth'];
            $orignalExpireYear = $_POST['expireyear'];
            $orignalPayment = '';
            $Payment = '';
            $cardsecuritycode = $_POST['cardsecuritycode'];
            $address = $_POST['address'];
            $city = $_POST['city'];
            $state = $_POST['state'];
            $zip = $_POST['zip'];
            $country = $_POST['country'];
            $firstname = $this->encrypt->encode($orginalFirstname);
            $Payment = $this->encrypt->encode($Payment);
            $Credit_Card_Number = $this->encrypt->encode($orginalCardNumber);
            $expiremonth = $this->encrypt->encode($orginalExpireMonth);
            $expireyear = $this->encrypt->encode($orignalExpireYear);
            $phone = htmlspecialchars(trim($_REQUEST['phone']), ENT_QUOTES, "ISO-8859-1");
            $cardsecuritycode = $this->encrypt->encode($cardsecuritycode);
            $payment_token = $_POST['stripeToken'];

            $billRow = $this->subscription_model->get_payment_info_by_accountid($this->accountid);
            if(empty($billRow)) {
                // Insert the payment method
                $param = array(
                    'ID_ACCOUNT' => $this->user->info->ID_ACCOUNT,
                    'bill_firstname' => $firstname,
                    'bill_address' => $address,
                    'bill_city' => $city,
                    'bill_region' => $state,
                    'bill_zip' => $zip,
                    'bill_country' => $country,
                    'bill_email' => $email,
                    'bill_phone' => $phone,
                    'cardtype' => $Payment,
                    'cardnumber' => $Credit_Card_Number,
                    'cardexpiremonth' => $expiremonth,
                    'cardexpireyear' => $expireyear,
                    'datecreated' => $datecreated,
                    'primaryPayment' => 1,
                    'cardsecuritycode' => $cardsecuritycode,
                    'signature' => '',
                    'payment_token' => $payment_token
                );
                $paymethodID = $this->subscription_model->insert_payment_info($param);
            }
            else
            {
                // Update the payment method
                $param = array(
                    'bill_firstname' => $firstname,
                    'bill_address' => $address,
                    'bill_city' => $city,
                    'bill_region' => $state,
                    'bill_zip' => $zip,
                    'bill_country' => $country,
                    'bill_email' => $email,
                    'bill_phone' => $phone,
                    'cardtype' => $Payment,
                    'cardnumber' => $Credit_Card_Number,
                    'cardexpiremonth' => $expiremonth,
                    'cardexpireyear' => $expireyear,
                    'datecreated' => $datecreated,
                    'primaryPayment' => 1,
                    'cardsecuritycode' => $cardsecuritycode,
                    'signature' => '',
                    'payment_token' => $payment_token
                );
                $this->subscription_model->update_payment_method_info($this->accountid, $param);
            }
            $prama = array('address' => $address, '	city' => $city, 'region' => $state, 'zip' => $zip, 'country' => $country, 'phone' => $phone);
            $this->Account_model->update_account($this->accountid, $prama);
            redirect(site_url("Subscription/customer_create"));

        }
    }


}
