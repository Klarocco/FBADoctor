<?php   /*
 * Generated by Webdimensions
 * www.webdimensions.co.in
 */

class Account_model extends CI_Model {

    function __construct() {
        parent::__construct();
    }
    /*
     * Enable / Disable account By Account Id
     */
    public function updateUserActivationCodeByAccountId($accountId,$data){
        $this->db->where('ID_ACCOUNT', $accountId)->update('users', $data);
        return $afftectedRows = $this->db->affected_rows();
    }
    public function accountEnableDisableByAccountId($accountId,$data,$updateUserData){
        $this->db->where('ID_ACCOUNT', $accountId)->update('accounts', $data);
        $this->db->where('ID_ACCOUNT',$accountId)->update('users',$updateUserData);
        return $afftectedRows = $this->db->affected_rows();
    }
    /*
     * Get account by Account Id
     */
    function get_account($ID_ACCOUNT) {
        return $this->db->get_where('accounts', array('ID_ACCOUNT' => $ID_ACCOUNT))->row_array();
    }
    /*
     * Get all accounts
     */
    function get_all_accounts() {
        $this->db->select('*');
        $this->db->from('accounts');
        $this->db->join('users','users.ID_ACCOUNT=accounts.ID_ACCOUNT','left');
        $this->db->join('user_roles','user_roles.ID=users.user_role','left');
        $this->db->where('accounts.deleted','0');
        $this->db->where('user_roles.ID', 2);
        return $this->db->get()->result_array();
    }

    /*
     * function to add new account
     */

    function add_account($params) {
        $this->db->insert('accounts', $params);
        return $this->db->insert_id();
    }

    /*
     * function to update account
     */

    function update_account($ID_ACCOUNT, $params) {
        $this->db->where('ID_ACCOUNT', $ID_ACCOUNT);
        $this->db->update('accounts', $params);
    }

    /*
     * function to delete account
     */

    function delete_account($ID_ACCOUNT) {
        $array = array('deleted'=>'1');
        $this->db->where('ID_ACCOUNT',$ID_ACCOUNT)->update('users',$array);
        $this->db->where('ID_ACCOUNT',$ID_ACCOUNT)->update('feedback_settings',$array);
        $this->db->where('ID_ACCOUNT',$ID_ACCOUNT)->update('accounts',$array);
    }

    /*
     * To get toatl account
     */

    public function get_total_account_count() {
        $s = $this->db->select("COUNT(*) as num")->where('accounts.deleted','0')->get("accounts");
        $r = $s->row();
        if (isset($r->num))
            return $r->num;
        return 0;
    }

    /*
     * get account data by company name
     */

    function search_by_account($search) {
        $this->db->limit(20);
        $this->db->where('accounts.deleted','0');
        $this->db->like("company", $search);
        return $this->db->get('accounts')->result_array();
    }

    /*
     * get account data by city
     */

    function search_by_city($search) {
        $this->db->where('accounts.deleted','0');
        $this->db->limit(20);
        $this->db->like("city", $search);
        return $this->db->get('accounts')->result_array();
    }

    /*
     * get account data by subscription id
     */

    function get_account_data_customerid_id($cutmoerid) {

        $this->db->select("users.*,accounts.*,users.id as userid,payment_method.cardnumber,payment_method.lastfour");
        $this->db->join("payment_method", "payment_method.ID_ACCOUNT = accounts.ID_ACCOUNT");
        $this->db->join("users", "users.ID_ACCOUNT = accounts.ID_ACCOUNT");
        $this->db->where('accounts.deleted','0');
        $this->db->where("payment_method.customerid", $cutmoerid);
        return $this->db->get("accounts")->row_array();
    }

    function get_account_charge($id)
    {
        return $this->db->select('*')->where('ID_ACCOUNT',$id)->get('accounts')->row_array();
    }

    public function updateAccountId($id,$data)
    {
        $this->db->where('ID_ACCOUNT',$id);
        $this->db->update('accounts',$data);
        return $this->db->affected_rows();
    }

}
