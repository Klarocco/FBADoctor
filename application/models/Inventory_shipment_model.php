<?php
/*
 * Generated by Webdimensions
 * www.webdimensions.co.in
 */

class Inventory_shipment_model extends CI_Model
{

    function __construct()
    {
        parent::__construct();
    }

    //get user details for return order cron
    function get_inventory_shipment_feedback_setting()
    {
        $t = time();
        $last24hours = $t - (1 * 9 * 60 * 60);
        $result = $this->db->query("
	SELECT a.ID_ACCOUNT, s.mws_sellerid, s.mws_authtoken, s.loadfirstreturnorder, s.amazonstorename,s.importorderdays,
        d.marketplace_id, d.access_key, d.secret_key, m.marketplace_id, m.host, m.id
        FROM accounts AS a, feedback_settings AS s, dev_accounts AS d, marketplaces AS m
	WHERE m.id= d.marketplace_id AND s.mws_marketplaceid = m.id AND s.ID_ACCOUNT = a.ID_ACCOUNT  and s.apiactive = 1 and a.deleted='0' AND a.removed = 0 AND a.enabled = 1 AND s.hourlimit_customershipmentsale < 6 AND (s.api_customershipmentsaledate  = 0 OR s.api_customershipmentsaledate < $last24hours)
        ");
        return $result;
    }

    function get_inventory_shipment_feedback_setting_historical()
    {
        $result = $this->db->query("
	SELECT a.ID_ACCOUNT, s.mws_sellerid, s.mws_authtoken, s.loadfirstreturnorder, s.amazonstorename,s.importorderdays,
        d.marketplace_id, d.access_key, d.secret_key, m.marketplace_id, m.host, m.id
        FROM accounts AS a, feedback_settings AS s, dev_accounts AS d, marketplaces AS m
	WHERE m.id= d.marketplace_id AND s.mws_marketplaceid = m.id AND s.ID_ACCOUNT = a.ID_ACCOUNT  and s.apiactive = 1 and a.deleted='0' AND a.removed = 0 AND a.enabled = 1   ");
        return $result;
    }

    function insert_inventory_shipment_data($data)
    {
        $this->db->where('shipment_id', $data['shipment_id']);
        $this->db->where('ID_ACCOUNT', $data['ID_ACCOUNT']);
        $result = $this->db->get('inventory_shipment')->row_array();
        if(empty($result))
        {
            $this->db->insert('inventory_shipment', $data);
            return $this->db->insert_id();
        }
        else
        {
            $this->db->where('id', $result['id']);
            $this->db->update('inventory_shipment', $data);
            return $result['id'];
        }
    }

    function insert_inventory_shipment_detail($data){
        $this->db->where('shipment_id', $data['shipment_id']);
        $this->db->where('seller_sku', $data['seller_sku']);
        $this->db->where('ID_ACCOUNT', $data['ID_ACCOUNT']);
        $result = $this->db->get('inventory_shipment_detail')->row_array();
        if(empty($result)){
            $this->db->insert('inventory_shipment_detail', $data);
            return $this->db->insert_id();
        }else{
            $this->db->where('id', $result['id']);
            $this->db->update('inventory_shipment_detail', $data);
            return $result['id'];
        }
    }

    public function getinventorysuppliedbyaccoundid_status($accoundID, $startDate){
        $this->db->where('ID_ACCOUNT',$accoundID);
        $this->db->where('shipment_from_date >=',$startDate);
        $this->db->where('status','0');
        $result =  $this->db->get('inventory_shipment_detail')->result_array();
        return $result;
    }

    public function updateinventorysuppliedbyid($id, $data){
        $this->db->where('id', $id);
        $this->db->update('inventory_shipment_detail', $data);
    }

    public function generatecaseinventorysupplied($caseArray){
        $this->db->where('inventoryItemId', $caseArray['inventoryItemId']);
        $checkValue = $this->db->get('case_details_inventory')->row_array();
        if(empty($checkValue))
        {
            $this->db->insert('case_details_inventory', $caseArray);
            return $this->db->insert_id();
        }
        return;
    }

    public function getreimbursecheckInventory($queryParam){
        return $this->db->get_where('reimburse_details', $queryParam)->row_array();
    }

    public function updatereimbursementdatabyID($id,$data)
    {
        $this->db->where('id', $id);
        $this->db->update('reimburse_details', $data);
    }
}