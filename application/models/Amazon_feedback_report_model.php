<?php

/*
 * Generated by Webdimensions
 * www.webdimensions.co.in
 */

class Amazon_feedback_report_model extends CI_Model {

    function __construct() {
        parent::__construct();
    }

    /*
     * Get feedback_report_setting by ID_ACCOUNT
     */
    function get_feedback_report_setting() {
        $t = time();
        $last24hours = $t - (1 * 24 * 60 * 60);
        $result = $this->db->query("
	SELECT a.ID_ACCOUNT, s.mws_sellerid, s.mws_marketplaceid, s.mws_authtoken, s.loadedfirstfeedbackdata, s.amazonstorename,
	s.set_notification_fbalerts_email,s.importorderdays, s.set_negativenetural_sendtype, s.set_negativenetural_sendtime, s.set_netural_fb_emailalerts, s.set_negative_fb_emailalerts,
	m.host,m.marketplace_id,d.access_key,d.secret_key 
	FROM (accounts as a, feedback_settings as s)
        LEFT JOIN marketplaces as m ON (m.id = s.mws_marketplaceid)
        LEFT JOIN dev_accounts as d ON (d.marketplace_id = m.id)
        WHERE s.ID_ACCOUNT = a.ID_ACCOUNT and s.apiactive = 1 AND a.removed = 0 AND a.enabled = 1  and a.deleted='0' AND(s.api_feedbackreportdate  = 0 OR s.api_feedbackreportdate < $last24hours)
        ");
        return $result;
    }
    function get_finance_report_setting() {
        $t = time();
        $last24hours = $t - (1 * 24 * 60 * 60);
        $result = $this->db->query("
	SELECT a.ID_ACCOUNT, s.mws_sellerid, s.mws_marketplaceid, s.mws_authtoken, s.loadfirstfinancereport, s.amazonstorename,
	s.set_notification_fbalerts_email,s.importorderdays, s.set_negativenetural_sendtype, s.set_negativenetural_sendtime, s.api_financereportdate, s.api_financereport,
	m.host,m.marketplace_id,d.access_key,d.secret_key 
	FROM (accounts as a, feedback_settings as s)
        LEFT JOIN marketplaces as m ON (m.id = s.mws_marketplaceid)
        LEFT JOIN dev_accounts as d ON (d.marketplace_id = m.id)
        WHERE s.ID_ACCOUNT = a.ID_ACCOUNT and s.apiactive = 1 AND a.removed = 0 AND a.enabled = 1  and a.deleted='0' AND(s.api_financereport  = 0 OR s.api_financereportdate < $last24hours)
        ");
        return $result;
    }
    /*
     * Add feedback_report
     */
    function add_feedback_report($params) {
        $this->db->insert('feedback_orders', $params);
        return $this->db->insert_id();
    }
    /*
     * custom_count_feedback_report
     */
    function custom_count_feedback_report($params) {
        $countTotal = $this->db->get_where('feedback_orders', $params);
        return $countTotal->num_rows();
    }
    /*
     * Get Nagative feedback by account id
     */
    function get_nagative_feedback_by_account_id($accountid, $type = '') {
        $this->db->select("feedback_history.ID_FEEDBACK,feedback_history.rating,feedback_history.feedbackdate,feedback_history.comments,feedback_history.arrivedontime,feedback_history.itemasdescribed,feedback_history.customerservice,feedback_history.orderid,feedback_history.ID_ACCOUNT,feedback_history.hasremoved,
                           feedback_orders.buyername,feedback_orders.fba,feedback_orders.ID_ORDER,feedback_orders.purchasedate,feedback_orders.productname,feedback_orders.sku,
                           users.username,users.email");
        $this->db->from('feedback_history')->order_by('feedback_history.ID_FEEDBACK','desc')->group_by('feedback_history.ID_FEEDBACK');
        $this->db->join('feedback_orders', 'feedback_orders.orderid=feedback_history.orderid', 'left' );
        $this->db->join('accounts','accounts.ID_ACCOUNT=feedback_orders.ID_ACCOUNT','left');
        $this->db->join('users','users.ID_ACCOUNT=accounts.ID_ACCOUNT','left');
        $this->db->where("feedback_history.ID_ACCOUNT",$accountid);
        $this->db->where("feedback_orders.ID_ACCOUNT",$accountid);
        $this->db->where("feedback_history.removed",0);
        $this->db->where("feedback_history.rating>",0);
        $this->db->where('accounts.deleted','0');
        return $result = $this->db->get()->result_array();
    }
    /*
     * Get orderinfo for sent mail ajax call
     */
    public function get_feedback_respond_data($accountId, $orderId) {
        $this->db->select('feedback_orders.ID_ORDER,feedback_orders.ID_ACCOUNT,feedback_orders.orderid,feedback_orders.purchasedate,feedback_orders.buyername,feedback_orders.buyeremail,feedback_orders.productname,feedback_orders.fba,
                           feedback_history.comments,feedback_history.feedbackdate,
                           feedback_settings.feedbackfromemailaddress,feedback_settings.amazonstorename,feedback_settings.mws_sellerid');
        $this->db->from('feedback_orders')->order_by('feedback_orders.ID_ORDER','desc')->group_by('feedback_orders.ID_ORDER');
        $this->db->join('feedback_history', 'feedback_history.orderid=feedback_orders.orderid', 'left' );
        $this->db->join('feedback_settings','feedback_settings.ID_ACCOUNT=feedback_orders.ID_ACCOUNT','left');
        $this->db->where('feedback_orders.ID_ACCOUNT',$accountId);
        $this->db->where('feedback_orders.orderid',$orderId);
        return $result = $this->db->get()->row_array();
    }
    /*
     * Get Positive feedback by account id
     */
    public function get_positive_feedback_by_account_id($accountid, $page, $col, $sort) {
        if ($col !== 0) {
            $this->db->order_by($col, $sort);
        } else {
            $this->db->order_by("feedback_history.ID_FEEDBACK", "DESC");
        }
        $this->db->DISTINCT("feedback_history.ID_FEEDBACK");
        $this->db->select('h.rating, h.feedbackdate, h.comments, h.arrivedontime, h.itemasdescribed, h.customerservice, h.orderid,
	                          o.buyername,o.fba, h.hasremoved, o.sku, o.ID_ORDER,o.purchasedate,o.productname');
        $this->db->from('feedback_history as h');
        $this->db->join('feedback_orders as o', 'o.orderid = h.orderid');
        $this->db->limit(10, $page);
       return $this->db->get("feedback_history")->result_array();
    }
    /*
     * Add Feedback Notes
     */
    public function insert_feedback_notes($data) {
        $this->db->insert('feedback_notes', $data);
        return $this->db->insert_id();
    }
    /*
     * Get note by account_id
     */
    public function get_all_notes_by_account_id($params) {
        $this->db->select("ID_ACCOUNT,ID_ORDER,datecreated,note");
        return $this->db->get_where("feedback_notes", $params)->result_array();
    }
    /*
     * get sent email data by account_id
     */
    public function get_email_sent_data_by_account_id($accountid, $page, $col, $sort, $sent) {
        if ($col !== 0) {
            $this->db->order_by($col, $sort);
        } else {
            $this->db->order_by("p.datetosend ", "DESC");
        }
        $this->db->DISTINCT('p.ID_EMAIL');
        $this->db->select('p.ID_ORDER,p.ID_EMAIL, p.emailtype, p.datetosend, o.buyername, o.orderid, o.productname, p.viewed');
        $this->db->from(' feedback_pendingemails as p');
        $this->db->join('feedback_orders as o', 'p.ID_ORDER = o.ID_ORDER', 'left');
        $this->db->where("p.ID_ACCOUNT = $accountid AND p.removed = 0 AND p.sent = $sent");
        $this->db->limit(10, $page);
        return $this->db->get("feedback_pendingemails")->result_array();
    }
    /*
     * count sent_email record by account_id
     */
    function count_sent_email_data_by_accountid($param) {
        $this->db->select('SQL_CALC_FOUND_ROWS null as rows', false);
        $this->db->get_where('feedback_pendingemails', $param);
        $total = $this->db->query('SELECT FOUND_ROWS() count;')->row()->count;
        return $total;
    }
    /*
     * count positive feedback record by account_id
     */
    public function count_positive_feedback_by_account_id($accountid) {
        $this->db->join('feedback_orders as o', 'o.orderid = feedback_history.orderid');
        $this->db->where("feedback_history.ID_ACCOUNT=$accountid AND rating>3 AND feedback_history.removed = 0 ");
        $countTotal = $this->db->get('feedback_history');

        return $countTotal->num_rows();
    }
    /*
     * count nagative feedback record by account_id
     */
    public function count_nagative_feedback_by_account_id($accountid, $type = '') {
        $this->db->join('feedback_orders as o', 'o.orderid = feedback_history.orderid');
        if ($type == 'nagative') {
            $this->db->where("feedback_history.ID_ACCOUNT=$accountid AND rating<3 AND feedback_history.removed = 0 ");
        } else {
            $this->db->where("feedback_history.ID_ACCOUNT=$accountid AND rating =3 AND feedback_history.removed = 0 ");
        }
        $countTotal = $this->db->get('feedback_history');

        return $countTotal->num_rows();
    }
    /*
     * Get Positive Feedback Settings.
     */
    public function get_postivefeedback_setting() {
        $t = time();
        $last12hours = $t - (1 * 12 * 60 * 60);

        $result = $this->db->query("
	SELECT a.ID_ACCOUNT, s.mws_sellerid, s.mws_marketplaceid, m.host,
	s.positivefeedback_password, s.positivefeedback_email,d.access_key,d.secret_key,m.host      
	FROM (accounts as a, feedback_settings as s)
        LEFT JOIN marketplaces as m ON (m.id = s.mws_marketplaceid)
        LEFT JOIN dev_accounts as d ON (d.marketplace_id = m.id)
	WHERE s.ID_ACCOUNT = a.ID_ACCOUNT and s.positivefeedback_fetchenabled = 1 AND s.positivefeedback_enabled = 1 AND a.enabled = 1 ");
        return $result;
    }
}
